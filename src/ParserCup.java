
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 04 01:10:19 GMT-03:00 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import symtab.*;
import type.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 04 01:10:19 GMT-03:00 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\345\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\004\000\002\010\004" +
    "\000\002\011\003\000\002\011\005\000\002\017\002\000" +
    "\002\017\003\000\002\013\002\000\002\013\004\000\002" +
    "\115\002\000\002\013\005\000\002\116\002\000\002\014" +
    "\007\000\002\117\002\000\002\014\011\000\002\015\005" +
    "\000\002\021\002\000\002\021\003\000\002\020\003\000" +
    "\002\020\004\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\006\000\002\120\002\000\002\024\007" +
    "\000\002\121\002\000\002\024\007\000\002\025\003\000" +
    "\002\025\006\000\002\122\002\000\002\025\006\000\002" +
    "\012\002\000\002\026\003\000\002\026\005\000\002\027" +
    "\004\000\002\123\002\000\002\030\011\000\002\124\002" +
    "\000\002\030\011\000\002\125\002\000\002\030\007\000" +
    "\002\031\002\000\002\031\003\000\002\032\003\000\002" +
    "\032\005\000\002\126\002\000\002\032\005\000\002\033" +
    "\004\000\002\034\005\000\002\034\003\000\002\035\004" +
    "\000\002\127\002\000\002\036\010\000\002\037\006\000" +
    "\002\037\005\000\002\040\007\000\002\040\007\000\002" +
    "\040\011\000\002\040\011\000\002\130\002\000\002\131" +
    "\002\000\002\041\007\000\002\042\002\000\002\042\003" +
    "\000\002\043\003\000\002\043\004\000\002\132\002\000" +
    "\002\043\005\000\002\044\003\000\002\044\003\000\002" +
    "\045\005\000\002\133\002\000\002\045\006\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\051\003\000\002\052\004\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\054\007" +
    "\000\002\134\002\000\002\054\007\000\002\055\011\000" +
    "\002\135\002\000\002\055\012\000\002\056\011\000\002" +
    "\057\007\000\002\136\002\000\002\057\007\000\002\060" +
    "\007\000\002\061\005\000\002\062\003\000\002\062\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\005\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\137\002" +
    "\000\002\063\006\000\002\140\002\000\002\063\006\000" +
    "\002\064\010\000\002\016\002\000\002\016\003\000\002" +
    "\065\002\000\002\065\003\000\002\066\003\000\002\066" +
    "\005\000\002\141\002\000\002\066\005\000\002\067\006" +
    "\000\002\067\006\000\002\070\003\000\002\070\004\000" +
    "\002\142\002\000\002\070\005\000\002\071\005\000\002" +
    "\072\002\000\002\072\003\000\002\073\004\000\002\073" +
    "\005\000\002\074\005\000\002\074\005\000\002\075\006" +
    "\000\002\075\010\000\002\075\010\000\002\076\006\000" +
    "\002\076\006\000\002\077\003\000\002\077\003\000\002" +
    "\077\004\000\002\100\003\000\002\100\004\000\002\100" +
    "\004\000\002\100\004\000\002\101\003\000\002\101\005" +
    "\000\002\101\005\000\002\101\005\000\002\143\002\000" +
    "\002\101\006\000\002\144\002\000\002\101\006\000\002" +
    "\145\002\000\002\101\006\000\002\102\003\000\002\102" +
    "\005\000\002\102\005\000\002\103\003\000\002\103\005" +
    "\000\002\103\005\000\002\103\005\000\002\103\005\000" +
    "\002\146\002\000\002\103\006\000\002\147\002\000\002" +
    "\103\006\000\002\150\002\000\002\103\006\000\002\151" +
    "\002\000\002\103\006\000\002\104\003\000\002\104\005" +
    "\000\002\104\005\000\002\152\002\000\002\104\006\000" +
    "\002\153\002\000\002\104\006\000\002\105\003\000\002" +
    "\105\005\000\002\154\002\000\002\105\006\000\002\106" +
    "\003\000\002\106\005\000\002\155\002\000\002\106\006" +
    "\000\002\107\003\000\002\107\007\000\002\156\002\000" +
    "\002\107\010\000\002\110\003\000\002\110\003\000\002" +
    "\111\005\000\002\157\002\000\002\111\006\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\113\002" +
    "\000\002\113\003\000\002\114\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\012\002\uffea\003\005\024\uffea\025\uffea\001" +
    "\002\000\004\002\u01a8\001\002\000\006\024\uffe8\025\uffe8" +
    "\001\002\000\010\002\000\024\010\025\uffec\001\002\000" +
    "\004\025\012\001\002\000\020\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\025\uffeb\027\uffeb\063\uffeb\001\002\000\010\002" +
    "\uffe9\024\uffe9\025\uffe9\001\002\000\004\063\013\001\002" +
    "\000\006\016\uffe6\026\014\001\002\000\004\063\u01a3\001" +
    "\002\000\004\016\016\001\002\000\030\003\027\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\013\030\016\020\017\uffe1\024" +
    "\010\027\uffec\063\uffec\001\002\000\010\002\uffe5\024\uffe5" +
    "\025\uffe5\001\002\000\060\003\uffb2\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\013\uffb2\016\uffb2\017\uffb2\021\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2" +
    "\001\002\000\006\013\u019c\016\u019b\001\002\000\030\003" +
    "\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\013\uffdc\016\uffdc" +
    "\017\uffdc\024\uffdc\027\uffdc\063\uffdc\001\002\000\030\003" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\013\uffdb\016\uffdb" +
    "\017\uffdb\024\uffdb\027\uffdb\063\uffdb\001\002\000\030\003" +
    "\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\013\uffd9\016\uffd9" +
    "\017\uffd9\024\uffd9\027\uffd9\063\uffd9\001\002\000\030\003" +
    "\027\004\uffec\005\uffec\006\uffec\007\uffec\013\030\016\020" +
    "\017\uffe0\024\010\027\uffec\063\uffec\001\002\000\004\016" +
    "\143\001\002\000\004\021\uffc6\001\002\000\030\003\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\013\uffd8\016\uffd8\017" +
    "\uffd8\024\uffd8\027\uffd8\063\uffd8\001\002\000\030\003\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\013\uffdf\016\uffdf\017" +
    "\uffdf\024\uffdf\027\uffdf\063\uffdf\001\002\000\030\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\013\uffda\016\uffda\017" +
    "\uffda\024\uffda\027\uffda\063\uffda\001\002\000\030\003\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\013\uffdd\016\uffdd\017" +
    "\uffdd\024\uffdd\027\uffdd\063\uffdd\001\002\000\016\004\041" +
    "\005\037\006\052\007\051\027\042\063\047\001\002\000" +
    "\004\017\036\001\002\000\062\002\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054" +
    "\uffe2\055\uffe2\001\002\000\012\003\ufff5\010\ufff5\012\ufff5" +
    "\063\ufff5\001\002\000\012\003\ufff2\010\122\012\135\063" +
    "\ufff2\001\002\000\012\003\ufff6\010\ufff6\012\ufff6\063\ufff6" +
    "\001\002\000\004\063\127\001\002\000\010\003\ufff9\010" +
    "\122\063\ufff9\001\002\000\012\003\ufff7\010\ufff7\012\ufff7" +
    "\063\ufff7\001\002\000\006\003\075\063\076\001\002\000" +
    "\006\003\ufff8\063\ufff8\001\002\000\014\003\uffee\010\uffee" +
    "\012\uffee\021\uffba\063\uffee\001\002\000\006\003\ufff1\063" +
    "\ufff1\001\002\000\012\003\ufff3\010\ufff3\012\ufff3\063\ufff3" +
    "\001\002\000\012\003\ufff4\010\ufff4\012\ufff4\063\ufff4\001" +
    "\002\000\004\021\054\001\002\000\020\003\060\004\041" +
    "\005\037\006\052\007\051\022\uffc4\063\062\001\002\000" +
    "\004\022\073\001\002\000\006\015\071\022\uffc3\001\002" +
    "\000\006\015\uffc2\022\uffc2\001\002\000\014\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\063\uffc0\001\002\000\004\063\064" +
    "\001\002\000\064\003\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\040\uffee\041\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\063\uffee\001\002\000\010\010\065\015\uffbe\022\uffbe\001" +
    "\002\000\012\010\uffcd\013\uffcd\015\uffcd\022\uffcd\001\002" +
    "\000\004\011\066\001\002\000\012\010\uffcc\013\uffcc\015" +
    "\uffcc\022\uffcc\001\002\000\014\004\041\005\037\006\052" +
    "\007\051\063\062\001\002\000\006\015\uffbf\022\uffbf\001" +
    "\002\000\014\004\041\005\037\006\052\007\051\063\062" +
    "\001\002\000\006\015\uffc1\022\uffc1\001\002\000\004\016" +
    "\uffb9\001\002\000\010\010\065\013\uffd2\015\uffd2\001\002" +
    "\000\026\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\013" +
    "\uffd6\015\uffd0\024\uffd4\027\uffd4\063\uffd4\001\002\000\012" +
    "\010\uffcd\013\uffcd\015\uffcd\021\uffca\001\002\000\006\013" +
    "\101\015\100\001\002\000\004\063\uffce\001\002\000\030" +
    "\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\013\uffd7\016" +
    "\uffd7\017\uffd7\024\uffd7\027\uffd7\063\uffd7\001\002\000\004" +
    "\063\064\001\002\000\010\010\065\013\uffd1\015\uffd1\001" +
    "\002\000\004\021\105\001\002\000\020\003\060\004\041" +
    "\005\037\006\052\007\051\022\uffc4\063\062\001\002\000" +
    "\004\022\107\001\002\000\006\013\uffc9\016\uffc9\001\002" +
    "\000\004\013\121\001\002\000\004\015\117\001\002\000" +
    "\022\003\027\004\uffec\005\uffec\006\uffec\007\uffec\024\010" +
    "\027\uffec\063\uffec\001\002\000\016\004\041\005\037\006" +
    "\052\007\051\027\042\063\062\001\002\000\030\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\013\uffd3\016\uffd3\017" +
    "\uffd3\024\uffd3\027\uffd3\063\uffd3\001\002\000\004\063\116" +
    "\001\002\000\004\021\uffca\001\002\000\004\063\064\001" +
    "\002\000\010\010\065\013\uffcf\015\uffcf\001\002\000\030" +
    "\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\013\uffd5\016" +
    "\uffd5\017\uffd5\024\uffd5\027\uffd5\063\uffd5\001\002\000\004" +
    "\011\126\001\002\000\012\003\ufff0\010\124\012\ufff0\063" +
    "\ufff0\001\002\000\004\011\125\001\002\000\060\003\uff63" +
    "\010\uff63\011\uff63\012\uff63\013\uff63\014\uff63\015\uff63\022" +
    "\uff63\023\uff63\040\uff63\041\uff63\043\uff63\044\uff63\045\uff63" +
    "\046\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054" +
    "\uff63\055\uff63\063\uff63\001\002\000\060\003\uff64\010\uff64" +
    "\011\uff64\012\uff64\013\uff64\014\uff64\015\uff64\022\uff64\023" +
    "\uff64\040\uff64\041\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054\uff64\055" +
    "\uff64\063\uff64\001\002\000\004\021\uffc8\001\002\000\004" +
    "\021\131\001\002\000\020\003\060\004\041\005\037\006" +
    "\052\007\051\022\uffc4\063\062\001\002\000\004\022\133" +
    "\001\002\000\006\013\uffc7\016\uffc7\001\002\000\012\003" +
    "\uffef\010\124\012\uffef\063\uffef\001\002\000\004\063\136" +
    "\001\002\000\064\003\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\040\uffed\041\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\063\uffed\001\002\000\004\021\140\001\002\000\020\003" +
    "\060\004\041\005\037\006\052\007\051\022\uffc4\063\062" +
    "\001\002\000\004\022\142\001\002\000\006\013\uffc5\016" +
    "\uffc5\001\002\000\060\003\177\004\041\005\037\006\052" +
    "\007\051\013\161\016\020\017\uffaf\021\152\027\201\030" +
    "\171\031\175\033\170\035\210\036\174\037\176\056\220" +
    "\057\204\060\160\061\162\062\147\063\062\064\167\001" +
    "\002\000\030\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\013\uffbb\016\uffbb\017\uffbb\024\uffbb\027\uffbb\063\uffbb\001" +
    "\002\000\004\013\u0198\001\002\000\056\010\uff82\011\uff82" +
    "\012\uff82\013\uff82\014\uff82\015\uff82\020\uff21\022\uff82\023" +
    "\uff82\040\uff82\041\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82\054\uff82\055" +
    "\uff82\001\002\000\054\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\022\ufffb\023\ufffb\040\ufffb\041\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\001\002\000\060\003" +
    "\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\013\uffa3\016\uffa3" +
    "\017\uffa3\021\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\001\002\000\004\020\u0196\001" +
    "\002\000\054\003\u0192\004\041\005\037\006\052\007\051" +
    "\021\152\027\201\030\230\031\231\032\265\037\176\040" +
    "\252\041\243\042\245\056\220\057\204\060\160\061\162" +
    "\062\147\063\062\064\167\001\002\000\054\010\uff86\011" +
    "\uff86\012\uff86\013\uff86\014\uff86\015\uff86\022\uff86\023\uff86" +
    "\040\uff86\041\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86" +
    "\001\002\000\052\011\uff87\012\uff87\013\uff87\014\uff87\015" +
    "\uff87\022\uff87\023\uff87\040\uff87\041\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\001\002\000\062\003\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\013\uff9d\016\uff9d\017\uff9d\021" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\001\002\000\060\003\177\004\041" +
    "\005\037\006\052\007\051\013\161\016\020\017\uffaf\021" +
    "\152\027\201\030\230\031\231\033\170\035\210\036\174" +
    "\037\176\056\220\057\204\060\160\061\162\062\147\063" +
    "\062\064\167\001\002\000\016\003\ufff2\010\312\012\314" +
    "\020\uff22\021\313\063\ufff2\001\002\000\054\010\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\022\ufffd\023\ufffd" +
    "\040\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\001\002\000\062\003\uff99\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\013\uff99\016\uff99\017\uff99\021\uff99\027\uff99\030\uff99" +
    "\031\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\056" +
    "\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99" +
    "\001\002\000\054\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\022\ufffc\023\ufffc\040\ufffc\041\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\001\002\000\062\003\uff9c" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\013\uff9c\016\uff9c\017" +
    "\uff9c\021\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\064\uff9c\001\002\000\010\003\ufff1" +
    "\012\u011f\063\ufff1\001\002\000\004\013\uff97\001\002\000" +
    "\004\012\u0184\001\002\000\054\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\022\ufffa\023\ufffa\040\ufffa\041" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\001\002\000" +
    "\006\003\u0159\021\u015a\001\002\000\010\010\uff85\012\uff85" +
    "\021\u0155\001\002\000\004\017\u0154\001\002\000\060\003" +
    "\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\013\uffa8\016\uffa8" +
    "\017\uffa8\021\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\001\002\000\056\003\254\004" +
    "\041\005\037\006\052\007\051\013\uff1f\021\152\027\201" +
    "\030\230\031\231\032\265\037\176\040\252\041\243\042" +
    "\245\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\006\012\u0123\021\u014d\001\002\000" +
    "\014\004\041\005\037\006\052\007\051\063\062\001\002" +
    "\000\062\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\012" +
    "\uff78\013\uffab\016\uffab\020\uff24\021\uffab\027\uffab\030\uffab" +
    "\031\uffab\033\uffab\035\uffab\036\uffab\037\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\001\002" +
    "\000\062\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\013" +
    "\uff9a\016\uff9a\017\uff9a\021\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\056\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002" +
    "\000\004\012\u0134\001\002\000\012\003\ufff9\010\122\012" +
    "\u0117\063\ufff9\001\002\000\010\010\uff83\012\uff83\013\uff95" +
    "\001\002\000\054\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\022\ufffe\023\ufffe\040\ufffe\041\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\001\002\000\054\010\u0131" +
    "\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\022\uff88\023" +
    "\uff88\040\uff88\041\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\001\002\000\060\003\uffa1\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\013\uffa1\016\uffa1\017\uffa1\021\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\001" +
    "\002\000\010\010\uff81\012\uff81\013\uff96\001\002\000\006" +
    "\003\u0128\021\u0129\001\002\000\060\003\uffad\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\013\uffad\016\uffad\017\uffad\021\uffad" +
    "\027\uffad\030\uffad\031\uffad\033\uffad\035\uffad\036\uffad\037" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\001\002\000\060\003\uffa9\004\uffa9\005\uffa9\006" +
    "\uffa9\007\uffa9\013\uffa9\016\uffa9\017\uffa9\021\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\033\uffa9\035\uffa9\036\uffa9\037\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\001\002\000\060\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007" +
    "\uffa4\013\uffa4\016\uffa4\017\uffa4\021\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\033\uffa4\035\uffa4\036\uffa4\037\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002" +
    "\000\062\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\013" +
    "\uff9b\016\uff9b\017\uff9b\021\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\056\uff9b\057" +
    "\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\001\002" +
    "\000\060\003\232\004\041\005\037\006\052\007\051\013" +
    "\161\016\020\017\uffae\021\152\027\201\030\230\031\231" +
    "\033\170\035\210\036\174\037\176\056\220\057\204\060" +
    "\160\061\162\062\147\063\062\064\167\001\002\000\060" +
    "\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\013\uffa2\016" +
    "\uffa2\017\uffa2\021\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\001\002\000\056\010\uff80" +
    "\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\020\uff20\022" +
    "\uff80\023\uff80\040\uff80\041\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\001\002\000\054\010\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\022\uffff\023\uffff\040\uffff\041" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\001\002\000" +
    "\006\003\222\063\064\001\002\000\006\013\uffa6\015\uffd0" +
    "\001\002\000\006\013\224\015\100\001\002\000\060\003" +
    "\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\013\uffa7\016\uffa7" +
    "\017\uffa7\021\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\001\002\000\004\013\226\001" +
    "\002\000\060\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5" +
    "\013\uffa5\016\uffa5\017\uffa5\021\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\033\uffa5\035\uffa5\036\uffa5\037\uffa5\056\uffa5\057\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\001\002\000" +
    "\004\012\u011a\001\002\000\054\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\014\uff85\015\uff85\022\uff85\023\uff85\040\uff85\041" +
    "\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\001\002\000" +
    "\004\012\u0123\001\002\000\006\012\uff78\020\uff24\001\002" +
    "\000\060\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\013" +
    "\uffac\016\uffac\017\uffac\021\uffac\027\uffac\030\uffac\031\uffac" +
    "\033\uffac\035\uffac\036\uffac\037\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\001\002\000\004" +
    "\020\240\001\002\000\004\012\236\001\002\000\004\030" +
    "\237\001\002\000\054\010\uff77\011\uff77\012\uff77\013\uff77" +
    "\014\uff77\015\uff77\022\uff77\023\uff77\040\uff77\041\uff77\043" +
    "\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77" +
    "\052\uff77\053\uff77\054\uff77\055\uff77\001\002\000\054\003" +
    "\254\004\041\005\037\006\052\007\051\021\152\027\201" +
    "\030\230\031\231\032\265\037\176\040\252\041\243\042" +
    "\245\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\042\011\uff47\013\uff47\015\uff47\022" +
    "\uff47\023\uff47\040\343\041\344\045\uff47\046\uff47\047\uff47" +
    "\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47\055\uff47\001" +
    "\002\000\022\011\uff2f\013\uff2f\015\uff2f\022\uff2f\023\uff2f" +
    "\053\u0102\054\uff2f\055\uff2f\001\002\000\054\003\305\004" +
    "\041\005\037\006\052\007\051\021\152\027\201\030\230" +
    "\031\231\032\265\037\176\040\252\041\243\042\245\056" +
    "\220\057\204\060\160\061\162\062\147\063\062\064\167" +
    "\001\002\000\060\010\312\011\uff5a\012\314\013\uff5a\014" +
    "\uff5a\015\uff5a\020\uff22\021\313\022\uff5a\023\uff5a\040\uff5a" +
    "\041\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050" +
    "\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055\uff5a\001\002" +
    "\000\054\003\305\004\041\005\037\006\052\007\051\021" +
    "\152\027\201\030\230\031\231\032\265\037\176\040\252" +
    "\041\243\042\245\056\220\057\204\060\160\061\162\062" +
    "\147\063\062\064\167\001\002\000\026\011\uff33\013\uff33" +
    "\015\uff33\022\uff33\023\uff33\051\372\052\371\053\uff33\054" +
    "\uff33\055\uff33\001\002\000\004\012\u011f\001\002\000\014" +
    "\011\uff26\013\uff26\015\uff26\022\uff26\023\uff26\001\002\000" +
    "\052\011\uff5b\012\u011a\013\uff5b\014\uff5b\015\uff5b\022\uff5b" +
    "\023\uff5b\040\uff5b\041\uff5b\043\uff5b\044\uff5b\045\uff5b\046" +
    "\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b" +
    "\055\uff5b\001\002\000\054\003\305\004\041\005\037\006" +
    "\052\007\051\021\152\027\201\030\230\031\231\032\265" +
    "\037\176\040\252\041\243\042\245\056\220\057\204\060" +
    "\160\061\162\062\147\063\062\064\167\001\002\000\050" +
    "\011\uff54\013\uff54\014\uff54\015\uff54\022\uff54\023\uff54\040" +
    "\uff54\041\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54" +
    "\050\uff54\051\uff54\052\uff54\053\uff54\054\uff54\055\uff54\001" +
    "\002\000\036\012\uff78\014\uff50\020\uff24\043\uff4e\044\uff4c" +
    "\045\uff42\046\uff40\047\uff3e\050\uff3c\051\uff37\052\uff35\053" +
    "\uff31\054\uff2d\055\uff29\001\002\000\014\011\uff27\013\uff27" +
    "\015\uff27\022\uff27\023\uff27\001\002\000\050\011\uff58\013" +
    "\uff58\014\uff58\015\uff58\022\uff58\023\uff58\040\uff58\041\uff58" +
    "\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\055\uff58\001\002\000\006" +
    "\010\122\012\u0117\001\002\000\020\011\uff2b\013\uff2b\015" +
    "\uff2b\022\uff2b\023\uff2b\054\u0109\055\u0112\001\002\000\054" +
    "\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\022" +
    "\uff83\023\uff83\040\uff83\041\uff83\043\uff83\044\uff83\045\uff83" +
    "\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054" +
    "\uff83\055\uff83\001\002\000\014\011\uff23\013\uff23\015\uff23" +
    "\022\uff23\023\uff23\001\002\000\054\010\uff81\011\uff81\012" +
    "\uff81\013\uff81\014\uff81\015\uff81\022\uff81\023\uff81\040\uff81" +
    "\041\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\001\002" +
    "\000\050\011\uff4a\013\uff4a\014\347\015\uff4a\022\uff4a\023" +
    "\uff4a\040\uff4a\041\uff4a\043\350\044\346\045\uff4a\046\uff4a" +
    "\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053\uff4a\054\uff4a\055" +
    "\uff4a\001\002\000\004\063\062\001\002\000\036\011\uff3a" +
    "\013\uff3a\015\uff3a\022\uff3a\023\uff3a\045\267\046\271\047" +
    "\272\050\270\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055\uff3a" +
    "\001\002\000\054\003\276\004\041\005\037\006\052\007" +
    "\051\021\152\027\201\030\230\031\231\032\265\037\176" +
    "\040\252\041\243\042\245\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\054\003\276" +
    "\004\041\005\037\006\052\007\051\021\152\027\201\030" +
    "\230\031\231\032\265\037\176\040\252\041\243\042\245" +
    "\056\220\057\204\060\160\061\162\062\147\063\062\064" +
    "\167\001\002\000\054\003\276\004\041\005\037\006\052" +
    "\007\051\021\152\027\201\030\230\031\231\032\265\037" +
    "\176\040\252\041\243\042\245\056\220\057\204\060\160" +
    "\061\162\062\147\063\062\064\167\001\002\000\054\003" +
    "\276\004\041\005\037\006\052\007\051\021\152\027\201" +
    "\030\230\031\231\032\265\037\176\040\252\041\243\042" +
    "\245\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\054\010\uff82\011\uff82\012\uff82\013" +
    "\uff82\014\uff82\015\uff82\022\uff82\023\uff82\040\uff82\041\uff82" +
    "\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051" +
    "\uff82\052\uff82\053\uff82\054\uff82\055\uff82\001\002\000\042" +
    "\011\uff44\013\uff44\015\uff44\022\uff44\023\uff44\040\343\041" +
    "\344\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44\052\uff44" +
    "\053\uff44\054\uff44\055\uff44\001\002\000\056\010\312\011" +
    "\uff5a\012\314\013\uff5a\014\uff5a\015\uff5a\021\313\022\uff5a" +
    "\023\uff5a\040\uff5a\041\uff5a\043\uff5a\044\uff5a\045\uff5a\046" +
    "\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a" +
    "\055\uff5a\001\002\000\012\012\uff78\014\uff50\043\uff4e\044" +
    "\uff4c\001\002\000\054\010\uff80\011\uff80\012\uff80\013\uff80" +
    "\014\uff80\015\uff80\022\uff80\023\uff80\040\uff80\041\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\001\002\000\004\014" +
    "\310\001\002\000\004\044\306\001\002\000\004\043\303" +
    "\001\002\000\054\003\305\004\041\005\037\006\052\007" +
    "\051\021\152\027\201\030\230\031\231\032\265\037\176" +
    "\040\252\041\243\042\245\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\050\011\uff4d" +
    "\013\uff4d\014\uff4d\015\uff4d\022\uff4d\023\uff4d\040\uff4d\041" +
    "\uff4d\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d" +
    "\051\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d\001\002\000" +
    "\004\012\uff78\001\002\000\054\003\305\004\041\005\037" +
    "\006\052\007\051\021\152\027\201\030\230\031\231\032" +
    "\265\037\176\040\252\041\243\042\245\056\220\057\204" +
    "\060\160\061\162\062\147\063\062\064\167\001\002\000" +
    "\050\011\uff4b\013\uff4b\014\uff4b\015\uff4b\022\uff4b\023\uff4b" +
    "\040\uff4b\041\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\047" +
    "\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b" +
    "\001\002\000\054\003\305\004\041\005\037\006\052\007" +
    "\051\021\152\027\201\030\230\031\231\032\265\037\176" +
    "\040\252\041\243\042\245\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\050\011\uff4f" +
    "\013\uff4f\014\uff4f\015\uff4f\022\uff4f\023\uff4f\040\uff4f\041" +
    "\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f" +
    "\051\uff4f\052\uff4f\053\uff4f\054\uff4f\055\uff4f\001\002\000" +
    "\056\003\254\004\041\005\037\006\052\007\051\011\126" +
    "\021\152\027\201\030\230\031\231\032\265\037\176\040" +
    "\252\041\243\042\245\056\220\057\204\060\160\061\162" +
    "\062\147\063\062\064\167\001\002\000\056\003\321\004" +
    "\041\005\037\006\052\007\051\021\152\022\uff73\027\201" +
    "\030\230\031\231\032\265\037\176\040\252\041\243\042" +
    "\245\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\010\025\316\030\315\063\136\001" +
    "\002\000\054\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b" +
    "\015\uff7b\022\uff7b\023\uff7b\040\uff7b\041\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b" +
    "\053\uff7b\054\uff7b\055\uff7b\001\002\000\054\010\uff7c\011" +
    "\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\022\uff7c\023\uff7c" +
    "\040\uff7c\041\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047" +
    "\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c" +
    "\001\002\000\004\022\u010b\001\002\000\006\015\uff71\022" +
    "\uff71\001\002\000\110\003\uff6f\004\uff6f\005\uff6f\006\uff6f" +
    "\007\uff6f\012\uff78\014\uff50\020\uff24\021\uff6f\027\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\043\uff4e\044\uff4c\045\uff42\046\uff40\047\uff3e\050\uff3c\051" +
    "\uff37\052\uff35\053\uff31\054\uff2d\055\uff29\056\uff6f\057\uff6f" +
    "\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\001\002\000" +
    "\006\015\324\022\uff72\001\002\000\014\011\uff1d\013\uff1d" +
    "\015\uff1d\022\uff1d\023\uff1d\001\002\000\054\003\254\004" +
    "\041\005\037\006\052\007\051\021\152\027\201\030\230" +
    "\031\231\032\265\037\176\040\252\041\243\042\245\056" +
    "\220\057\204\060\160\061\162\062\147\063\062\064\167" +
    "\001\002\000\006\015\uff70\022\uff70\001\002\000\004\055" +
    "\u0104\001\002\000\004\054\377\001\002\000\004\051\375" +
    "\001\002\000\004\053\366\001\002\000\004\052\363\001" +
    "\002\000\004\050\361\001\002\000\004\047\357\001\002" +
    "\000\004\046\355\001\002\000\004\045\341\001\002\000" +
    "\054\003\254\004\041\005\037\006\052\007\051\021\152" +
    "\027\201\030\230\031\231\032\265\037\176\040\252\041" +
    "\243\042\245\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\006\015\uff6e\022\uff6e\001" +
    "\002\000\054\003\276\004\041\005\037\006\052\007\051" +
    "\021\152\027\201\030\230\031\231\032\265\037\176\040" +
    "\252\041\243\042\245\056\220\057\204\060\160\061\162" +
    "\062\147\063\062\064\167\001\002\000\042\011\uff41\013" +
    "\uff41\015\uff41\022\uff41\023\uff41\040\343\041\344\045\uff41" +
    "\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41\053\uff41\054" +
    "\uff41\055\uff41\001\002\000\054\003\276\004\041\005\037" +
    "\006\052\007\051\021\152\027\201\030\230\031\231\032" +
    "\265\037\176\040\252\041\243\042\245\056\220\057\204" +
    "\060\160\061\162\062\147\063\062\064\167\001\002\000" +
    "\054\003\276\004\041\005\037\006\052\007\051\021\152" +
    "\027\201\030\230\031\231\032\265\037\176\040\252\041" +
    "\243\042\245\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\050\011\uff48\013\uff48\014" +
    "\347\015\uff48\022\uff48\023\uff48\040\uff48\041\uff48\043\350" +
    "\044\346\045\uff48\046\uff48\047\uff48\050\uff48\051\uff48\052" +
    "\uff48\053\uff48\054\uff48\055\uff48\001\002\000\054\003\305" +
    "\004\041\005\037\006\052\007\051\021\152\027\201\030" +
    "\230\031\231\032\265\037\176\040\252\041\243\042\245" +
    "\056\220\057\204\060\160\061\162\062\147\063\062\064" +
    "\167\001\002\000\054\003\305\004\041\005\037\006\052" +
    "\007\051\021\152\027\201\030\230\031\231\032\265\037" +
    "\176\040\252\041\243\042\245\056\220\057\204\060\160" +
    "\061\162\062\147\063\062\064\167\001\002\000\054\003" +
    "\305\004\041\005\037\006\052\007\051\021\152\027\201" +
    "\030\230\031\231\032\265\037\176\040\252\041\243\042" +
    "\245\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\050\011\uff52\013\uff52\014\uff52\015" +
    "\uff52\022\uff52\023\uff52\040\uff52\041\uff52\043\uff52\044\uff52" +
    "\045\uff52\046\uff52\047\uff52\050\uff52\051\uff52\052\uff52\053" +
    "\uff52\054\uff52\055\uff52\001\002\000\050\011\uff53\013\uff53" +
    "\014\uff53\015\uff53\022\uff53\023\uff53\040\uff53\041\uff53\043" +
    "\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53" +
    "\052\uff53\053\uff53\054\uff53\055\uff53\001\002\000\050\011" +
    "\uff51\013\uff51\014\uff51\015\uff51\022\uff51\023\uff51\040\uff51" +
    "\041\uff51\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050" +
    "\uff51\051\uff51\052\uff51\053\uff51\054\uff51\055\uff51\001\002" +
    "\000\050\011\uff49\013\uff49\014\347\015\uff49\022\uff49\023" +
    "\uff49\040\uff49\041\uff49\043\350\044\346\045\uff49\046\uff49" +
    "\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\054\uff49\055" +
    "\uff49\001\002\000\054\003\276\004\041\005\037\006\052" +
    "\007\051\021\152\027\201\030\230\031\231\032\265\037" +
    "\176\040\252\041\243\042\245\056\220\057\204\060\160" +
    "\061\162\062\147\063\062\064\167\001\002\000\042\011" +
    "\uff3f\013\uff3f\015\uff3f\022\uff3f\023\uff3f\040\343\041\344" +
    "\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f\053" +
    "\uff3f\054\uff3f\055\uff3f\001\002\000\054\003\276\004\041" +
    "\005\037\006\052\007\051\021\152\027\201\030\230\031" +
    "\231\032\265\037\176\040\252\041\243\042\245\056\220" +
    "\057\204\060\160\061\162\062\147\063\062\064\167\001" +
    "\002\000\042\011\uff3d\013\uff3d\015\uff3d\022\uff3d\023\uff3d" +
    "\040\343\041\344\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051" +
    "\uff3d\052\uff3d\053\uff3d\054\uff3d\055\uff3d\001\002\000\054" +
    "\003\276\004\041\005\037\006\052\007\051\021\152\027" +
    "\201\030\230\031\231\032\265\037\176\040\252\041\243" +
    "\042\245\056\220\057\204\060\160\061\162\062\147\063" +
    "\062\064\167\001\002\000\042\011\uff3b\013\uff3b\015\uff3b" +
    "\022\uff3b\023\uff3b\040\343\041\344\045\uff3b\046\uff3b\047" +
    "\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055\uff3b" +
    "\001\002\000\054\003\364\004\041\005\037\006\052\007" +
    "\051\021\152\027\201\030\230\031\231\032\265\037\176" +
    "\040\252\041\243\042\245\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\022\012\uff78" +
    "\014\uff50\043\uff4e\044\uff4c\045\uff42\046\uff40\047\uff3e\050" +
    "\uff3c\001\002\000\036\011\uff34\013\uff34\015\uff34\022\uff34" +
    "\023\uff34\045\267\046\271\047\272\050\270\051\uff34\052" +
    "\uff34\053\uff34\054\uff34\055\uff34\001\002\000\054\003\370" +
    "\004\041\005\037\006\052\007\051\021\152\027\201\030" +
    "\230\031\231\032\265\037\176\040\252\041\243\042\245" +
    "\056\220\057\204\060\160\061\162\062\147\063\062\064" +
    "\167\001\002\000\026\011\uff30\013\uff30\015\uff30\022\uff30" +
    "\023\uff30\051\372\052\371\053\uff30\054\uff30\055\uff30\001" +
    "\002\000\026\012\uff78\014\uff50\043\uff4e\044\uff4c\045\uff42" +
    "\046\uff40\047\uff3e\050\uff3c\051\uff37\052\uff35\001\002\000" +
    "\054\003\364\004\041\005\037\006\052\007\051\021\152" +
    "\027\201\030\230\031\231\032\265\037\176\040\252\041" +
    "\243\042\245\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\054\003\364\004\041\005" +
    "\037\006\052\007\051\021\152\027\201\030\230\031\231" +
    "\032\265\037\176\040\252\041\243\042\245\056\220\057" +
    "\204\060\160\061\162\062\147\063\062\064\167\001\002" +
    "\000\036\011\uff39\013\uff39\015\uff39\022\uff39\023\uff39\045" +
    "\267\046\271\047\272\050\270\051\uff39\052\uff39\053\uff39" +
    "\054\uff39\055\uff39\001\002\000\036\011\uff38\013\uff38\015" +
    "\uff38\022\uff38\023\uff38\045\267\046\271\047\272\050\270" +
    "\051\uff38\052\uff38\053\uff38\054\uff38\055\uff38\001\002\000" +
    "\054\003\364\004\041\005\037\006\052\007\051\021\152" +
    "\027\201\030\230\031\231\032\265\037\176\040\252\041" +
    "\243\042\245\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\036\011\uff36\013\uff36\015" +
    "\uff36\022\uff36\023\uff36\045\267\046\271\047\272\050\270" +
    "\051\uff36\052\uff36\053\uff36\054\uff36\055\uff36\001\002\000" +
    "\054\003\u0101\004\041\005\037\006\052\007\051\021\152" +
    "\027\201\030\230\031\231\032\265\037\176\040\252\041" +
    "\243\042\245\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\022\011\uff2c\013\uff2c\015" +
    "\uff2c\022\uff2c\023\uff2c\053\u0102\054\uff2c\055\uff2c\001\002" +
    "\000\030\012\uff78\014\uff50\043\uff4e\044\uff4c\045\uff42\046" +
    "\uff40\047\uff3e\050\uff3c\051\uff37\052\uff35\053\uff31\001\002" +
    "\000\054\003\370\004\041\005\037\006\052\007\051\021" +
    "\152\027\201\030\230\031\231\032\265\037\176\040\252" +
    "\041\243\042\245\056\220\057\204\060\160\061\162\062" +
    "\147\063\062\064\167\001\002\000\026\011\uff32\013\uff32" +
    "\015\uff32\022\uff32\023\uff32\051\372\052\371\053\uff32\054" +
    "\uff32\055\uff32\001\002\000\054\003\254\004\041\005\037" +
    "\006\052\007\051\021\152\027\201\030\230\031\231\032" +
    "\265\037\176\040\252\041\243\042\245\056\220\057\204" +
    "\060\160\061\162\062\147\063\062\064\167\001\002\000" +
    "\004\023\u0106\001\002\000\054\003\u0107\004\041\005\037" +
    "\006\052\007\051\021\152\027\201\030\230\031\231\032" +
    "\265\037\176\040\252\041\243\042\245\056\220\057\204" +
    "\060\160\061\162\062\147\063\062\064\167\001\002\000" +
    "\032\012\uff78\014\uff50\043\uff4e\044\uff4c\045\uff42\046\uff40" +
    "\047\uff3e\050\uff3c\051\uff37\052\uff35\053\uff31\054\uff2d\001" +
    "\002\000\016\011\uff28\013\uff28\015\uff28\022\uff28\023\uff28" +
    "\054\u0109\001\002\000\054\003\u0101\004\041\005\037\006" +
    "\052\007\051\021\152\027\201\030\230\031\231\032\265" +
    "\037\176\040\252\041\243\042\245\056\220\057\204\060" +
    "\160\061\162\062\147\063\062\064\167\001\002\000\022" +
    "\011\uff2e\013\uff2e\015\uff2e\022\uff2e\023\uff2e\053\u0102\054" +
    "\uff2e\055\uff2e\001\002\000\054\010\uff60\011\uff60\012\uff60" +
    "\013\uff60\014\uff60\015\uff60\022\uff60\023\uff60\040\uff60\041" +
    "\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60" +
    "\051\uff60\052\uff60\053\uff60\054\uff60\055\uff60\001\002\000" +
    "\004\011\u010d\001\002\000\056\010\uff5d\011\uff5d\012\uff5d" +
    "\013\uff5d\014\uff5d\015\uff5d\020\uff5d\022\uff5d\023\uff5d\040" +
    "\uff5d\041\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d" +
    "\050\uff5d\051\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\001" +
    "\002\000\042\011\uff45\013\uff45\015\uff45\022\uff45\023\uff45" +
    "\040\343\041\344\045\uff45\046\uff45\047\uff45\050\uff45\051" +
    "\uff45\052\uff45\053\uff45\054\uff45\055\uff45\001\002\000\042" +
    "\011\uff43\013\uff43\015\uff43\022\uff43\023\uff43\040\343\041" +
    "\344\045\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052\uff43" +
    "\053\uff43\054\uff43\055\uff43\001\002\000\042\011\uff46\013" +
    "\uff46\015\uff46\022\uff46\023\uff46\040\343\041\344\045\uff46" +
    "\046\uff46\047\uff46\050\uff46\051\uff46\052\uff46\053\uff46\054" +
    "\uff46\055\uff46\001\002\000\052\011\uff59\012\135\013\uff59" +
    "\014\uff59\015\uff59\022\uff59\023\uff59\040\uff59\041\uff59\043" +
    "\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050\uff59\051\uff59" +
    "\052\uff59\053\uff59\054\uff59\055\uff59\001\002\000\054\003" +
    "\254\004\041\005\037\006\052\007\051\021\152\027\201" +
    "\030\230\031\231\032\265\037\176\040\252\041\243\042" +
    "\245\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\004\023\u0114\001\002\000\054\003" +
    "\u0115\004\041\005\037\006\052\007\051\021\152\027\201" +
    "\030\230\031\231\032\265\037\176\040\252\041\243\042" +
    "\245\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\034\012\uff78\014\uff50\043\uff4e\044" +
    "\uff4c\045\uff42\046\uff40\047\uff3e\050\uff3c\051\uff37\052\uff35" +
    "\053\uff31\054\uff2d\055\uff29\001\002\000\014\011\uff2a\013" +
    "\uff2a\015\uff2a\022\uff2a\023\uff2a\001\002\000\004\025\u0118" +
    "\001\002\000\054\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\022\uff7f\023\uff7f\040\uff7f\041\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052" +
    "\uff7f\053\uff7f\054\uff7f\055\uff7f\001\002\000\050\011\uff56" +
    "\013\uff56\014\uff56\015\uff56\022\uff56\023\uff56\040\uff56\041" +
    "\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56" +
    "\051\uff56\052\uff56\053\uff56\054\uff56\055\uff56\001\002\000" +
    "\004\063\u011b\001\002\000\060\010\uff62\011\uff62\012\uff62" +
    "\013\uff62\014\uff62\015\uff62\020\uff62\021\u011c\022\uff62\023" +
    "\uff62\040\uff62\041\uff62\043\uff62\044\uff62\045\uff62\046\uff62" +
    "\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055" +
    "\uff62\001\002\000\056\003\321\004\041\005\037\006\052" +
    "\007\051\021\152\022\uff73\027\201\030\230\031\231\032" +
    "\265\037\176\040\252\041\243\042\245\056\220\057\204" +
    "\060\160\061\162\062\147\063\062\064\167\001\002\000" +
    "\004\022\u011e\001\002\000\054\010\uff5f\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\015\uff5f\022\uff5f\023\uff5f\040\uff5f\041" +
    "\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f" +
    "\051\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\001\002\000" +
    "\004\025\u0120\001\002\000\054\010\uff7d\011\uff7d\012\uff7d" +
    "\013\uff7d\014\uff7d\015\uff7d\022\uff7d\023\uff7d\040\uff7d\041" +
    "\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\001\002\000" +
    "\050\011\uff57\013\uff57\014\uff57\015\uff57\022\uff57\023\uff57" +
    "\040\uff57\041\uff57\043\uff57\044\uff57\045\uff57\046\uff57\047" +
    "\uff57\050\uff57\051\uff57\052\uff57\053\uff57\054\uff57\055\uff57" +
    "\001\002\000\050\011\uff55\013\uff55\014\uff55\015\uff55\022" +
    "\uff55\023\uff55\040\uff55\041\uff55\043\uff55\044\uff55\045\uff55" +
    "\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55\054" +
    "\uff55\055\uff55\001\002\000\004\063\u0124\001\002\000\060" +
    "\010\uff61\011\uff61\012\uff61\013\uff61\014\uff61\015\uff61\020" +
    "\uff61\021\u0125\022\uff61\023\uff61\040\uff61\041\uff61\043\uff61" +
    "\044\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052" +
    "\uff61\053\uff61\054\uff61\055\uff61\001\002\000\056\003\321" +
    "\004\041\005\037\006\052\007\051\021\152\022\uff73\027" +
    "\201\030\230\031\231\032\265\037\176\040\252\041\243" +
    "\042\245\056\220\057\204\060\160\061\162\062\147\063" +
    "\062\064\167\001\002\000\004\022\u0127\001\002\000\054" +
    "\010\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\022" +
    "\uff5e\023\uff5e\040\uff5e\041\uff5e\043\uff5e\044\uff5e\045\uff5e" +
    "\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054" +
    "\uff5e\055\uff5e\001\002\000\004\022\uff8c\001\002\000\054" +
    "\003\254\004\041\005\037\006\052\007\051\021\152\027" +
    "\201\030\230\031\231\032\265\037\176\040\252\041\243" +
    "\042\245\056\220\057\204\060\160\061\162\062\147\063" +
    "\062\064\167\001\002\000\004\022\u012b\001\002\000\056" +
    "\003\232\004\041\005\037\006\052\007\051\013\161\016" +
    "\020\021\152\027\201\030\230\031\231\033\170\035\210" +
    "\036\174\037\176\056\220\057\204\060\160\061\162\062" +
    "\147\063\062\064\167\001\002\000\012\010\312\012\314" +
    "\020\uff22\021\313\001\002\000\060\003\uff8d\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\013\uff8d\016\uff8d\017\uff8d\021\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\033\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\064\uff8d\001\002\000\004\022\u012f\001\002\000\056\003" +
    "\232\004\041\005\037\006\052\007\051\013\161\016\020" +
    "\021\152\027\201\030\230\031\231\033\170\035\210\036" +
    "\174\037\176\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\060\003\uff8b\004\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\013\uff8b\016\uff8b\017\uff8b\021\uff8b" +
    "\027\uff8b\030\uff8b\031\uff8b\033\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b" +
    "\064\uff8b\001\002\000\054\003\254\004\041\005\037\006" +
    "\052\007\051\021\152\027\201\030\230\031\231\032\265" +
    "\037\176\040\252\041\243\042\245\056\220\057\204\060" +
    "\160\061\162\062\147\063\062\064\167\001\002\000\004" +
    "\011\u0133\001\002\000\056\010\uff5c\011\uff5c\012\uff5c\013" +
    "\uff5c\014\uff5c\015\uff5c\020\uff5c\022\uff5c\023\uff5c\040\uff5c" +
    "\041\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050" +
    "\uff5c\051\uff5c\052\uff5c\053\uff5c\054\uff5c\055\uff5c\001\002" +
    "\000\004\025\u0135\001\002\000\054\010\uff7e\011\uff7e\012" +
    "\uff7e\013\uff7e\014\uff7e\015\uff7e\022\uff7e\023\uff7e\040\uff7e" +
    "\041\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\001\002" +
    "\000\056\003\232\004\041\005\037\006\052\007\051\013" +
    "\161\016\020\021\152\027\201\030\230\031\231\033\170" +
    "\035\210\036\174\037\176\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\060\003\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\013\uffaa\016\uffaa\017" +
    "\uffaa\021\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\063\uffaa\064\uffaa\001\002\000\012\003\u013a\010\u013c" +
    "\012\135\021\u0147\001\002\000\006\003\u013a\010\u013c\001" +
    "\002\000\004\010\uff69\001\002\000\054\010\uff6b\011\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\015\uff6b\022\uff6b\023\uff6b\040" +
    "\uff6b\041\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b" +
    "\050\uff6b\051\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\001" +
    "\002\000\054\003\254\004\041\005\037\006\052\007\051" +
    "\021\152\027\201\030\230\031\231\032\265\037\176\040" +
    "\252\041\243\042\245\056\220\057\204\060\160\061\162" +
    "\062\147\063\062\064\167\001\002\000\054\010\u0140\011" +
    "\uff66\012\uff66\013\uff66\014\uff66\015\uff66\022\uff66\023\uff66" +
    "\040\uff66\041\uff66\043\uff66\044\uff66\045\uff66\046\uff66\047" +
    "\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66" +
    "\001\002\000\052\011\uff6d\012\uff6d\013\uff6d\014\uff6d\015" +
    "\uff6d\022\uff6d\023\uff6d\040\uff6d\041\uff6d\043\uff6d\044\uff6d" +
    "\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053" +
    "\uff6d\054\uff6d\055\uff6d\001\002\000\054\010\uff6a\011\uff6a" +
    "\012\uff6a\013\uff6a\014\uff6a\015\uff6a\022\uff6a\023\uff6a\040" +
    "\uff6a\041\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\001" +
    "\002\000\056\003\254\004\041\005\037\006\052\007\051" +
    "\011\126\021\152\027\201\030\230\031\231\032\265\037" +
    "\176\040\252\041\243\042\245\056\220\057\204\060\160" +
    "\061\162\062\147\063\062\064\167\001\002\000\054\010" +
    "\124\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65\022\uff65" +
    "\023\uff65\040\uff65\041\uff65\043\uff65\044\uff65\045\uff65\046" +
    "\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65" +
    "\055\uff65\001\002\000\004\011\u0143\001\002\000\054\010" +
    "\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\022\uff67" +
    "\023\uff67\040\uff67\041\uff67\043\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67" +
    "\055\uff67\001\002\000\004\010\u013c\001\002\000\054\010" +
    "\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015\uff68\022\uff68" +
    "\023\uff68\040\uff68\041\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68" +
    "\055\uff68\001\002\000\054\010\u0140\011\uff66\012\uff66\013" +
    "\uff66\014\uff66\015\uff66\022\uff66\023\uff66\040\uff66\041\uff66" +
    "\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051" +
    "\uff66\052\uff66\053\uff66\054\uff66\055\uff66\001\002\000\056" +
    "\003\321\004\041\005\037\006\052\007\051\021\152\022" +
    "\uff73\027\201\030\230\031\231\032\265\037\176\040\252" +
    "\041\243\042\245\056\220\057\204\060\160\061\162\062" +
    "\147\063\062\064\167\001\002\000\004\022\u0149\001\002" +
    "\000\056\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015" +
    "\uff75\016\016\022\uff75\023\uff75\040\uff75\041\uff75\043\uff75" +
    "\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052" +
    "\uff75\053\uff75\054\uff75\055\uff75\001\002\000\054\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\022\uff76\023" +
    "\uff76\040\uff76\041\uff76\043\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055" +
    "\uff76\001\002\000\054\010\uff74\011\uff74\012\uff74\013\uff74" +
    "\014\uff74\015\uff74\022\uff74\023\uff74\040\uff74\041\uff74\043" +
    "\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74" +
    "\052\uff74\053\uff74\054\uff74\055\uff74\001\002\000\052\011" +
    "\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\022\uff6c\023\uff6c" +
    "\040\uff6c\041\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047" +
    "\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c" +
    "\001\002\000\056\003\321\004\041\005\037\006\052\007" +
    "\051\021\152\022\uff73\027\201\030\230\031\231\032\265" +
    "\037\176\040\252\041\243\042\245\056\220\057\204\060" +
    "\160\061\162\062\147\063\062\064\167\001\002\000\004" +
    "\022\u014f\001\002\000\004\013\u0150\001\002\000\060\003" +
    "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\013\uffb5\016\uffb5" +
    "\017\uffb5\021\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\001\002\000\004\013\uff1e\001" +
    "\002\000\004\013\u0153\001\002\000\062\003\uff89\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\013\uff89\016\uff89\017\uff89\021" +
    "\uff89\027\uff89\030\uff89\031\uff89\033\uff89\034\uff89\035\uff89" +
    "\036\uff89\037\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\001\002\000\030\003\uffb7\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\013\uffb7\016\uffb7\017\uffb7\024" +
    "\uffb7\027\uffb7\063\uffb7\001\002\000\056\003\321\004\041" +
    "\005\037\006\052\007\051\021\152\022\uff73\027\201\030" +
    "\230\031\231\032\265\037\176\040\252\041\243\042\245" +
    "\056\220\057\204\060\160\061\162\062\147\063\062\064" +
    "\167\001\002\000\004\022\u0157\001\002\000\004\013\u0158" +
    "\001\002\000\060\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\013\uffb6\016\uffb6\017\uffb6\021\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002" +
    "\000\004\022\uff93\001\002\000\054\003\u015c\004\041\005" +
    "\037\006\052\007\051\021\152\027\201\030\230\031\231" +
    "\032\265\037\176\040\252\041\243\042\245\056\220\057" +
    "\204\060\160\061\162\062\147\063\062\064\167\001\002" +
    "\000\004\022\u0171\001\002\000\040\012\uff78\014\uff50\020" +
    "\uff24\022\uff90\043\uff4e\044\uff4c\045\uff42\046\uff40\047\uff3e" +
    "\050\uff3c\051\uff37\052\uff35\053\uff31\054\uff2d\055\uff29\001" +
    "\002\000\004\022\u015e\001\002\000\056\003\232\004\041" +
    "\005\037\006\052\007\051\013\161\016\020\021\152\027" +
    "\201\030\230\031\231\033\u0161\035\u0163\036\174\037\176" +
    "\056\220\057\204\060\160\061\162\062\147\063\062\064" +
    "\167\001\002\000\004\034\uff9f\001\002\000\004\034\u016f" +
    "\001\002\000\004\021\u0169\001\002\000\004\034\uff9e\001" +
    "\002\000\004\021\u0165\001\002\000\004\034\uffa0\001\002" +
    "\000\054\003\254\004\041\005\037\006\052\007\051\021" +
    "\152\027\201\030\230\031\231\032\265\037\176\040\252" +
    "\041\243\042\245\056\220\057\204\060\160\061\162\062" +
    "\147\063\062\064\167\001\002\000\004\022\u0167\001\002" +
    "\000\056\003\232\004\041\005\037\006\052\007\051\013" +
    "\161\016\020\021\152\027\201\030\230\031\231\033\u0161" +
    "\035\u0163\036\174\037\176\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\004\034\uff8a" +
    "\001\002\000\054\003\254\004\041\005\037\006\052\007" +
    "\051\021\152\027\201\030\230\031\231\032\265\037\176" +
    "\040\252\041\243\042\245\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\004\022\u016b" +
    "\001\002\000\056\003\232\004\041\005\037\006\052\007" +
    "\051\013\161\016\020\021\152\027\201\030\230\031\231" +
    "\033\u0161\035\u0163\036\174\037\176\056\220\057\204\060" +
    "\160\061\162\062\147\063\062\064\167\001\002\000\004" +
    "\034\u016d\001\002\000\056\003\232\004\041\005\037\006" +
    "\052\007\051\013\161\016\020\021\152\027\201\030\230" +
    "\031\231\033\u0161\035\u0163\036\174\037\176\056\220\057" +
    "\204\060\160\061\162\062\147\063\062\064\167\001\002" +
    "\000\004\034\uff8e\001\002\000\056\003\232\004\041\005" +
    "\037\006\052\007\051\013\161\016\020\021\152\027\201" +
    "\030\230\031\231\033\170\035\210\036\174\037\176\056" +
    "\220\057\204\060\160\061\162\062\147\063\062\064\167" +
    "\001\002\000\060\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\013\uff8f\016\uff8f\017\uff8f\021\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\033\uff8f\035\uff8f\036\uff8f\037\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\001\002" +
    "\000\056\003\232\004\041\005\037\006\052\007\051\013" +
    "\161\016\020\021\152\027\201\030\230\031\231\033\u0173" +
    "\035\u0175\036\174\037\176\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\004\034\u0180" +
    "\001\002\000\006\003\u0159\021\u017a\001\002\000\060\003" +
    "\uff94\004\uff94\005\uff94\006\uff94\007\uff94\013\uff94\016\uff94" +
    "\017\uff94\021\uff94\027\uff94\030\uff94\031\uff94\033\uff94\035" +
    "\uff94\036\uff94\037\uff94\056\uff94\057\uff94\060\uff94\061\uff94" +
    "\062\uff94\063\uff94\064\uff94\001\002\000\006\003\u0128\021" +
    "\u0177\001\002\000\062\003\uffa4\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\013\uffa4\016\uffa4\017\uffa4\021\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\033\uffa4\034\uffa0\035\uffa4\036\uffa4\037\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\001\002\000\054\003\254\004\041\005\037\006\052" +
    "\007\051\021\152\027\201\030\230\031\231\032\265\037" +
    "\176\040\252\041\243\042\245\056\220\057\204\060\160" +
    "\061\162\062\147\063\062\064\167\001\002\000\004\022" +
    "\u0179\001\002\000\056\003\232\004\041\005\037\006\052" +
    "\007\051\013\161\016\020\021\152\027\201\030\230\031" +
    "\231\033\u0173\035\u0175\036\174\037\176\056\220\057\204" +
    "\060\160\061\162\062\147\063\062\064\167\001\002\000" +
    "\054\003\u015c\004\041\005\037\006\052\007\051\021\152" +
    "\027\201\030\230\031\231\032\265\037\176\040\252\041" +
    "\243\042\245\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\004\022\u017c\001\002\000" +
    "\056\003\232\004\041\005\037\006\052\007\051\013\161" +
    "\016\020\021\152\027\201\030\230\031\231\033\u0173\035" +
    "\u0175\036\174\037\176\056\220\057\204\060\160\061\162" +
    "\062\147\063\062\064\167\001\002\000\004\034\u017e\001" +
    "\002\000\056\003\232\004\041\005\037\006\052\007\051" +
    "\013\161\016\020\021\152\027\201\030\230\031\231\033" +
    "\u0173\035\u0175\036\174\037\176\056\220\057\204\060\160" +
    "\061\162\062\147\063\062\064\167\001\002\000\060\003" +
    "\uff91\004\uff91\005\uff91\006\uff91\007\uff91\013\uff91\016\uff91" +
    "\017\uff91\021\uff91\027\uff91\030\uff91\031\uff91\033\uff91\035" +
    "\uff91\036\uff91\037\uff91\056\uff91\057\uff91\060\uff91\061\uff91" +
    "\062\uff91\063\uff91\064\uff91\001\002\000\056\003\232\004" +
    "\041\005\037\006\052\007\051\013\161\016\020\021\152" +
    "\027\201\030\230\031\231\033\170\035\210\036\174\037" +
    "\176\056\220\057\204\060\160\061\162\062\147\063\062" +
    "\064\167\001\002\000\004\022\u0182\001\002\000\056\003" +
    "\232\004\041\005\037\006\052\007\051\013\161\016\020" +
    "\021\152\027\201\030\230\031\231\033\170\035\210\036" +
    "\174\037\176\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\060\003\uff92\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\013\uff92\016\uff92\017\uff92\021\uff92" +
    "\027\uff92\030\uff92\031\uff92\033\uff92\035\uff92\036\uff92\037" +
    "\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92" +
    "\064\uff92\001\002\000\010\030\u0186\031\u0185\063\u011b\001" +
    "\002\000\004\021\u018b\001\002\000\004\021\u0187\001\002" +
    "\000\056\003\321\004\041\005\037\006\052\007\051\021" +
    "\152\022\uff73\027\201\030\230\031\231\032\265\037\176" +
    "\040\252\041\243\042\245\056\220\057\204\060\160\061" +
    "\162\062\147\063\062\064\167\001\002\000\004\022\u0189" +
    "\001\002\000\004\013\u018a\001\002\000\060\003\uffb4\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\013\uffb4\016\uffb4\017\uffb4" +
    "\021\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\001\002\000\056\003\321\004\041\005" +
    "\037\006\052\007\051\021\152\022\uff73\027\201\030\230" +
    "\031\231\032\265\037\176\040\252\041\243\042\245\056" +
    "\220\057\204\060\160\061\162\062\147\063\062\064\167" +
    "\001\002\000\004\022\u018d\001\002\000\004\013\u018e\001" +
    "\002\000\060\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\013\uffb3\016\uffb3\017\uffb3\021\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002\000" +
    "\004\017\u0190\001\002\000\030\003\uffb8\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\013\uffb8\016\uffb8\017\uffb8\024\uffb8\027" +
    "\uffb8\063\uffb8\001\002\000\004\022\u0195\001\002\000\040" +
    "\012\uff78\014\uff50\020\uff24\022\uff7a\043\uff4e\044\uff4c\045" +
    "\uff42\046\uff40\047\uff3e\050\uff3c\051\uff37\052\uff35\053\uff31" +
    "\054\uff2d\055\uff29\001\002\000\004\022\u0194\001\002\000" +
    "\054\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\022\uff79\023\uff79\040\uff79\041\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\001\002\000\054\010\uff84\011\uff84\012" +
    "\uff84\013\uff84\014\uff84\015\uff84\022\uff84\023\uff84\040\uff84" +
    "\041\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050" +
    "\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\001\002" +
    "\000\054\003\254\004\041\005\037\006\052\007\051\021" +
    "\152\027\201\030\230\031\231\032\265\037\176\040\252" +
    "\041\243\042\245\056\220\057\204\060\160\061\162\062" +
    "\147\063\062\064\167\001\002\000\014\011\uff25\013\uff25" +
    "\015\uff25\022\uff25\023\uff25\001\002\000\062\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\013\uff98\016\uff98\017\uff98" +
    "\021\uff98\027\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\056\uff98\057\uff98\060\uff98\061\uff98" +
    "\062\uff98\063\uff98\064\uff98\001\002\000\030\003\uffde\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\013\uffde\016\uffde\017\uffde" +
    "\024\uffde\027\uffde\063\uffde\001\002\000\030\003\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\013\uffcb\016\uffcb\017\uffcb" +
    "\024\uffcb\027\uffcb\063\uffcb\001\002\000\060\003\177\004" +
    "\041\005\037\006\052\007\051\013\161\016\020\017\uffaf" +
    "\021\152\027\201\030\230\031\231\033\170\035\210\036" +
    "\174\037\176\056\220\057\204\060\160\061\162\062\147" +
    "\063\062\064\167\001\002\000\030\003\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\013\uffbc\016\uffbc\017\uffbc\024\uffbc" +
    "\027\uffbc\063\uffbc\001\002\000\004\017\u019e\001\002\000" +
    "\030\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\013\uffbd" +
    "\016\uffbd\017\uffbd\024\uffbd\027\uffbd\063\uffbd\001\002\000" +
    "\060\003\177\004\041\005\037\006\052\007\051\013\161" +
    "\016\020\017\uffaf\021\152\027\201\030\230\031\231\033" +
    "\170\035\210\036\174\037\176\056\220\057\204\060\160" +
    "\061\162\062\147\063\062\064\167\001\002\000\004\017" +
    "\uffb1\001\002\000\004\017\u01a2\001\002\000\064\003\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\013\uffb0\016\uffb0\017" +
    "\uffb0\021\uffb0\024\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001\002\000\004" +
    "\016\uffe4\001\002\000\004\016\016\001\002\000\010\002" +
    "\uffe3\024\uffe3\025\uffe3\001\002\000\006\024\010\025\uffec" +
    "\001\002\000\010\002\uffe7\024\uffe7\025\uffe7\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\006\002\003\013\005\001\001\000\002\001" +
    "\001\000\004\115\u01a5\001\001\000\006\014\010\017\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\014\001\001\000\002" +
    "\001\001\000\004\015\016\001\001\000\030\017\033\020" +
    "\024\021\034\022\030\023\032\024\031\027\023\030\020" +
    "\035\021\036\025\041\022\001\001\000\002\001\001\000" +
    "\004\130\u019e\001\001\000\004\034\u0199\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\017" +
    "\033\022\u0198\023\032\024\031\027\023\030\020\035\021" +
    "\036\025\041\022\001\001\000\004\037\143\001\001\000" +
    "\004\125\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\044\005" +
    "\042\006\043\007\045\010\047\011\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\122\001\001\000\002\001\001\000\006\025\076\026" +
    "\073\001\001\000\002\001\001\000\004\127\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\060\005\042\006\043\007\045" +
    "\010\047\011\037\031\054\032\055\033\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\126\066\001\001\000\004\026\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\060\005\042\006\043\007" +
    "\045\010\047\011\037\033\067\001\001\000\002\001\001" +
    "\000\020\004\060\005\042\006\043\007\045\010\047\011" +
    "\037\033\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\120\107\121\111\122\110\001" +
    "\001\000\004\123\103\001\001\000\002\001\001\000\004" +
    "\012\101\001\001\000\002\001\001\000\004\026\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\060" +
    "\005\042\006\043\007\045\010\047\011\037\031\105\032" +
    "\055\033\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\112\027" +
    "\113\030\020\001\001\000\016\004\114\005\042\006\043" +
    "\007\045\010\047\011\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\103\001\001\000\004\026\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\124\127\001\001\000\002\001" +
    "\001\000\024\004\060\005\042\006\043\007\045\010\047" +
    "\011\037\031\131\032\055\033\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\060\005" +
    "\042\006\043\007\045\010\047\011\037\031\140\032\055" +
    "\033\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\003\152\004\220\005\201\006\043\007\045\010\163" +
    "\011\156\040\155\041\154\042\171\043\214\044\210\045" +
    "\211\046\172\050\212\051\162\052\213\053\144\054\147" +
    "\055\215\057\205\061\177\062\165\063\204\064\202\067" +
    "\153\074\145\075\206\076\216\111\164\112\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\152\005\256\006\043\010\246\011\243\062\250\063" +
    "\204\064\260\067\153\074\145\075\262\076\216\077\255" +
    "\100\252\101\263\102\240\103\265\104\245\105\241\106" +
    "\257\107\254\110\322\111\247\112\150\114\u0190\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\003\152\004\220\005\201\006\043\007\045\010\163" +
    "\011\156\041\154\042\u018e\043\214\044\210\045\211\046" +
    "\172\050\212\051\162\052\213\053\144\054\147\055\215" +
    "\057\205\061\177\062\226\063\204\064\202\067\153\074" +
    "\145\075\206\076\216\111\164\112\150\001\001\000\004" +
    "\073\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\003\152\005\256\006\043\010\246\011\243\062" +
    "\250\063\204\064\260\067\153\074\145\075\262\076\216" +
    "\077\255\100\252\101\263\102\240\103\265\104\245\105" +
    "\241\106\257\107\254\110\322\111\247\112\150\113\u0151" +
    "\114\u0150\001\001\000\002\001\001\000\010\005\u0138\006" +
    "\043\011\u0137\001\001\000\010\132\u0135\140\234\157\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\152\004\220\005\201\006" +
    "\043\007\045\010\163\011\156\041\154\044\232\045\211" +
    "\046\172\050\212\051\162\052\213\053\144\054\147\055" +
    "\215\057\205\061\177\062\226\063\204\064\202\067\153" +
    "\074\145\075\206\076\216\111\164\112\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\222\026\073\001\001\000\006\122\110\133\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\140\234\157\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\152\005\256\006\043" +
    "\010\246\011\243\062\250\063\204\064\260\067\153\074" +
    "\145\075\262\076\216\077\255\100\252\101\263\102\240" +
    "\103\265\104\245\105\241\106\257\107\254\110\261\111" +
    "\247\112\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\152\005\256\006\043\010\246\011\274\062" +
    "\250\063\204\064\260\067\153\074\272\075\262\076\276" +
    "\077\255\100\u0121\001\001\000\004\073\133\001\001\000" +
    "\036\003\152\005\256\006\043\010\246\011\274\062\250" +
    "\063\204\064\260\067\153\074\272\075\262\076\276\077" +
    "\255\100\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\152\005" +
    "\256\006\043\010\246\011\274\062\250\063\204\064\260" +
    "\067\153\074\272\075\262\076\276\077\255\100\u0118\001" +
    "\001\000\002\001\001\000\036\140\234\143\277\144\301" +
    "\145\300\146\335\147\334\150\333\151\332\152\327\153" +
    "\331\154\330\155\326\156\325\157\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0110\001\001\000" +
    "\002\001\001\000\042\003\152\005\256\006\043\010\246" +
    "\011\274\062\250\063\204\064\260\067\153\074\272\075" +
    "\262\076\276\077\255\100\252\101\263\102\u010f\001\001" +
    "\000\042\003\152\005\256\006\043\010\246\011\274\062" +
    "\250\063\204\064\260\067\153\074\272\075\262\076\276" +
    "\077\255\100\252\101\263\102\u010e\001\001\000\042\003" +
    "\152\005\256\006\043\010\246\011\274\062\250\063\204" +
    "\064\260\067\153\074\272\075\262\076\276\077\255\100" +
    "\252\101\263\102\u010d\001\001\000\042\003\152\005\256" +
    "\006\043\010\246\011\274\062\250\063\204\064\260\067" +
    "\153\074\272\075\262\076\276\077\255\100\252\101\263" +
    "\102\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\133\001\001\000\012\140\234\143\277\144\301" +
    "\145\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\152\005\256" +
    "\006\043\010\246\011\274\062\250\063\204\064\260\067" +
    "\153\074\272\075\262\076\276\077\255\100\303\001\001" +
    "\000\002\001\001\000\004\140\234\001\001\000\036\003" +
    "\152\005\256\006\043\010\246\011\274\062\250\063\204" +
    "\064\260\067\153\074\272\075\262\076\276\077\255\100" +
    "\306\001\001\000\002\001\001\000\036\003\152\005\256" +
    "\006\043\010\246\011\274\062\250\063\204\064\260\067" +
    "\153\074\272\075\262\076\276\077\255\100\310\001\001" +
    "\000\002\001\001\000\064\003\152\005\256\006\043\010" +
    "\246\011\243\062\250\063\204\064\260\067\153\074\145" +
    "\075\262\076\216\077\255\100\252\101\263\102\240\103" +
    "\265\104\245\105\241\106\257\107\254\110\322\111\247" +
    "\112\150\114\u010b\001\001\000\070\003\152\005\256\006" +
    "\043\010\246\011\243\062\250\063\204\064\260\065\316" +
    "\066\321\067\153\074\145\075\262\076\216\077\255\100" +
    "\252\101\263\102\240\103\265\104\245\105\241\106\257" +
    "\107\254\110\322\111\247\112\150\114\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\140\234\141\336\143" +
    "\277\144\301\145\300\146\335\147\334\150\333\151\332" +
    "\152\327\153\331\154\330\155\326\156\325\157\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\152" +
    "\005\256\006\043\010\246\011\243\062\250\063\204\064" +
    "\260\067\153\074\145\075\262\076\216\077\255\100\252" +
    "\101\263\102\240\103\265\104\245\105\241\106\257\107" +
    "\254\110\322\111\247\112\150\114\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\152\005\256\006\043\010\246\011\243\062\250" +
    "\063\204\064\260\067\153\074\145\075\262\076\216\077" +
    "\255\100\252\101\263\102\240\103\265\104\245\105\241" +
    "\106\257\107\254\110\322\111\247\112\150\114\337\001" +
    "\001\000\002\001\001\000\042\003\152\005\256\006\043" +
    "\010\246\011\274\062\250\063\204\064\260\067\153\074" +
    "\272\075\262\076\276\077\255\100\252\101\263\102\341" +
    "\001\001\000\002\001\001\000\040\003\152\005\256\006" +
    "\043\010\246\011\274\062\250\063\204\064\260\067\153" +
    "\074\272\075\262\076\276\077\255\100\252\101\353\001" +
    "\001\000\040\003\152\005\256\006\043\010\246\011\274" +
    "\062\250\063\204\064\260\067\153\074\272\075\262\076" +
    "\276\077\255\100\252\101\344\001\001\000\002\001\001" +
    "\000\036\003\152\005\256\006\043\010\246\011\274\062" +
    "\250\063\204\064\260\067\153\074\272\075\262\076\276" +
    "\077\255\100\352\001\001\000\036\003\152\005\256\006" +
    "\043\010\246\011\274\062\250\063\204\064\260\067\153" +
    "\074\272\075\262\076\276\077\255\100\351\001\001\000" +
    "\036\003\152\005\256\006\043\010\246\011\274\062\250" +
    "\063\204\064\260\067\153\074\272\075\262\076\276\077" +
    "\255\100\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\152\005" +
    "\256\006\043\010\246\011\274\062\250\063\204\064\260" +
    "\067\153\074\272\075\262\076\276\077\255\100\252\101" +
    "\263\102\355\001\001\000\002\001\001\000\042\003\152" +
    "\005\256\006\043\010\246\011\274\062\250\063\204\064" +
    "\260\067\153\074\272\075\262\076\276\077\255\100\252" +
    "\101\263\102\357\001\001\000\002\001\001\000\042\003" +
    "\152\005\256\006\043\010\246\011\274\062\250\063\204" +
    "\064\260\067\153\074\272\075\262\076\276\077\255\100" +
    "\252\101\263\102\361\001\001\000\002\001\001\000\044" +
    "\003\152\005\256\006\043\010\246\011\274\062\250\063" +
    "\204\064\260\067\153\074\272\075\262\076\276\077\255" +
    "\100\252\101\263\102\240\103\364\001\001\000\022\140" +
    "\234\143\277\144\301\145\300\146\335\147\334\150\333" +
    "\151\332\001\001\000\002\001\001\000\046\003\152\005" +
    "\256\006\043\010\246\011\274\062\250\063\204\064\260" +
    "\067\153\074\272\075\262\076\276\077\255\100\252\101" +
    "\263\102\240\103\265\104\366\001\001\000\002\001\001" +
    "\000\026\140\234\143\277\144\301\145\300\146\335\147" +
    "\334\150\333\151\332\152\327\153\331\001\001\000\044" +
    "\003\152\005\256\006\043\010\246\011\274\062\250\063" +
    "\204\064\260\067\153\074\272\075\262\076\276\077\255" +
    "\100\252\101\263\102\240\103\373\001\001\000\044\003" +
    "\152\005\256\006\043\010\246\011\274\062\250\063\204" +
    "\064\260\067\153\074\272\075\262\076\276\077\255\100" +
    "\252\101\263\102\240\103\372\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\152\005\256\006\043\010" +
    "\246\011\274\062\250\063\204\064\260\067\153\074\272" +
    "\075\262\076\276\077\255\100\252\101\263\102\240\103" +
    "\375\001\001\000\002\001\001\000\050\003\152\005\256" +
    "\006\043\010\246\011\274\062\250\063\204\064\260\067" +
    "\153\074\272\075\262\076\276\077\255\100\252\101\263" +
    "\102\240\103\265\104\245\105\377\001\001\000\002\001" +
    "\001\000\030\140\234\143\277\144\301\145\300\146\335" +
    "\147\334\150\333\151\332\152\327\153\331\154\330\001" +
    "\001\000\046\003\152\005\256\006\043\010\246\011\274" +
    "\062\250\063\204\064\260\067\153\074\272\075\262\076" +
    "\276\077\255\100\252\101\263\102\240\103\265\104\u0102" +
    "\001\001\000\002\001\001\000\064\003\152\005\256\006" +
    "\043\010\246\011\243\062\250\063\204\064\260\067\153" +
    "\074\145\075\262\076\216\077\255\100\252\101\263\102" +
    "\240\103\265\104\245\105\241\106\257\107\254\110\322" +
    "\111\247\112\150\114\u0104\001\001\000\002\001\001\000" +
    "\052\003\152\005\256\006\043\010\246\011\274\062\250" +
    "\063\204\064\260\067\153\074\272\075\262\076\276\077" +
    "\255\100\252\101\263\102\240\103\265\104\245\105\241" +
    "\106\u0107\001\001\000\032\140\234\143\277\144\301\145" +
    "\300\146\335\147\334\150\333\151\332\152\327\153\331" +
    "\154\330\155\326\001\001\000\002\001\001\000\050\003" +
    "\152\005\256\006\043\010\246\011\274\062\250\063\204" +
    "\064\260\067\153\074\272\075\262\076\276\077\255\100" +
    "\252\101\263\102\240\103\265\104\245\105\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\152\005\256\006" +
    "\043\010\246\011\243\062\250\063\204\064\260\067\153" +
    "\074\145\075\262\076\216\077\255\100\252\101\263\102" +
    "\240\103\265\104\245\105\241\106\257\107\254\110\322" +
    "\111\247\112\150\114\u0112\001\001\000\002\001\001\000" +
    "\054\003\152\005\256\006\043\010\246\011\274\062\250" +
    "\063\204\064\260\067\153\074\272\075\262\076\276\077" +
    "\255\100\252\101\263\102\240\103\265\104\245\105\241" +
    "\106\257\107\u0115\001\001\000\034\140\234\143\277\144" +
    "\301\145\300\146\335\147\334\150\333\151\332\152\327" +
    "\153\331\154\330\155\326\156\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\152\005" +
    "\256\006\043\010\246\011\243\062\250\063\204\064\260" +
    "\065\u011c\066\321\067\153\074\145\075\262\076\216\077" +
    "\255\100\252\101\263\102\240\103\265\104\245\105\241" +
    "\106\257\107\254\110\322\111\247\112\150\114\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\003\152\005\256" +
    "\006\043\010\246\011\243\062\250\063\204\064\260\065" +
    "\u0125\066\321\067\153\074\145\075\262\076\216\077\255" +
    "\100\252\101\263\102\240\103\265\104\245\105\241\106" +
    "\257\107\254\110\322\111\247\112\150\114\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\136\u012d\001" +
    "\001\000\064\003\152\005\256\006\043\010\246\011\243" +
    "\062\250\063\204\064\260\067\153\074\145\075\262\076" +
    "\216\077\255\100\252\101\263\102\240\103\265\104\245" +
    "\105\241\106\257\107\254\110\322\111\247\112\150\114" +
    "\u0129\001\001\000\002\001\001\000\062\003\152\005\256" +
    "\006\043\010\246\011\u012b\041\154\046\u012c\050\212\051" +
    "\162\052\213\053\144\054\147\055\215\057\205\061\177" +
    "\062\226\063\204\064\202\067\153\074\145\075\206\076" +
    "\216\111\164\112\150\001\001\000\004\073\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\152\005" +
    "\256\006\043\010\246\011\u012b\041\154\046\u012f\050\212" +
    "\051\162\052\213\053\144\054\147\055\215\057\205\061" +
    "\177\062\226\063\204\064\202\067\153\074\145\075\206" +
    "\076\216\111\164\112\150\001\001\000\002\001\001\000" +
    "\064\003\152\005\256\006\043\010\246\011\243\062\250" +
    "\063\204\064\260\067\153\074\145\075\262\076\216\077" +
    "\255\100\252\101\263\102\240\103\265\104\245\105\241" +
    "\106\257\107\254\110\322\111\247\112\150\114\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\152\004\220\005\201\006" +
    "\043\007\045\010\163\011\156\041\154\044\u0136\045\211" +
    "\046\172\050\212\051\162\052\213\053\144\054\147\055" +
    "\215\057\205\061\177\062\226\063\204\064\202\067\153" +
    "\074\145\075\206\076\216\111\164\112\150\001\001\000" +
    "\002\001\001\000\006\070\u0145\071\u013a\001\001\000\006" +
    "\070\u013c\071\u013a\001\001\000\004\142\u0143\001\001\000" +
    "\002\001\001\000\064\003\152\005\256\006\043\010\246" +
    "\011\243\062\250\063\204\064\260\067\153\074\145\075" +
    "\262\076\216\077\255\100\252\101\263\102\240\103\265" +
    "\104\245\105\241\106\257\107\254\110\322\111\247\112" +
    "\150\114\u0141\001\001\000\010\071\u013e\072\u013d\073\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\152\005\256\006\043\010\246\011\243\062\250\063\204" +
    "\064\260\067\153\074\145\075\262\076\216\077\255\100" +
    "\252\101\263\102\240\103\265\104\245\105\241\106\257" +
    "\107\254\110\322\111\247\112\150\114\u0141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\u0144\001\001\000\002\001\001\000\010\071\u013e\072" +
    "\u014b\073\u0140\001\001\000\070\003\152\005\256\006\043" +
    "\010\246\011\243\062\250\063\204\064\260\065\u0147\066" +
    "\321\067\153\074\145\075\262\076\216\077\255\100\252" +
    "\101\263\102\240\103\265\104\245\105\241\106\257\107" +
    "\254\110\322\111\247\112\150\114\317\001\001\000\002" +
    "\001\001\000\006\015\u014a\016\u0149\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\003\152" +
    "\005\256\006\043\010\246\011\243\062\250\063\204\064" +
    "\260\065\u014d\066\321\067\153\074\145\075\262\076\216" +
    "\077\255\100\252\101\263\102\240\103\265\104\245\105" +
    "\241\106\257\107\254\110\322\111\247\112\150\114\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\003\152\005\256\006\043\010" +
    "\246\011\243\062\250\063\204\064\260\065\u0155\066\321" +
    "\067\153\074\145\075\262\076\216\077\255\100\252\101" +
    "\263\102\240\103\265\104\245\105\241\106\257\107\254" +
    "\110\322\111\247\112\150\114\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\134\u0180" +
    "\001\001\000\064\003\152\005\256\006\043\010\246\011" +
    "\243\062\250\063\204\064\260\067\153\074\145\075\262" +
    "\076\216\077\255\100\252\101\263\102\240\103\265\104" +
    "\245\105\241\106\257\107\254\110\322\111\247\112\150" +
    "\114\u015a\001\001\000\002\001\001\000\040\135\u015c\140" +
    "\234\143\277\144\301\145\300\146\335\147\334\150\333" +
    "\151\332\152\327\153\331\154\330\155\326\156\325\157" +
    "\233\001\001\000\002\001\001\000\060\003\152\005\256" +
    "\006\043\010\246\011\u012b\041\154\047\u015f\050\u0163\051" +
    "\162\052\213\053\144\056\u015e\060\u0161\061\177\062\226" +
    "\063\204\064\202\067\153\074\145\075\206\076\216\111" +
    "\164\112\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\152\005\256\006\043\010\246" +
    "\011\243\062\250\063\204\064\260\067\153\074\145\075" +
    "\262\076\216\077\255\100\252\101\263\102\240\103\265" +
    "\104\245\105\241\106\257\107\254\110\322\111\247\112" +
    "\150\114\u0165\001\001\000\002\001\001\000\060\003\152" +
    "\005\256\006\043\010\246\011\u012b\041\154\047\u0167\050" +
    "\u0163\051\162\052\213\053\144\056\u015e\060\u0161\061\177" +
    "\062\226\063\204\064\202\067\153\074\145\075\206\076" +
    "\216\111\164\112\150\001\001\000\002\001\001\000\064" +
    "\003\152\005\256\006\043\010\246\011\243\062\250\063" +
    "\204\064\260\067\153\074\145\075\262\076\216\077\255" +
    "\100\252\101\263\102\240\103\265\104\245\105\241\106" +
    "\257\107\254\110\322\111\247\112\150\114\u0169\001\001" +
    "\000\002\001\001\000\060\003\152\005\256\006\043\010" +
    "\246\011\u012b\041\154\047\u016b\050\u0163\051\162\052\213" +
    "\053\144\056\u015e\060\u0161\061\177\062\226\063\204\064" +
    "\202\067\153\074\145\075\206\076\216\111\164\112\150" +
    "\001\001\000\002\001\001\000\060\003\152\005\256\006" +
    "\043\010\246\011\u012b\041\154\047\u016d\050\u0163\051\162" +
    "\052\213\053\144\056\u015e\060\u0161\061\177\062\226\063" +
    "\204\064\202\067\153\074\145\075\206\076\216\111\164" +
    "\112\150\001\001\000\002\001\001\000\062\003\152\005" +
    "\256\006\043\010\246\011\u012b\041\154\046\u016f\050\212" +
    "\051\162\052\213\053\144\054\147\055\215\057\205\061" +
    "\177\062\226\063\204\064\202\067\153\074\145\075\206" +
    "\076\216\111\164\112\150\001\001\000\002\001\001\000" +
    "\070\003\152\005\256\006\043\010\246\011\u012b\041\154" +
    "\046\u0173\047\u0171\050\u0175\051\162\052\213\053\144\054" +
    "\147\055\215\056\u015e\057\205\060\u0161\061\177\062\226" +
    "\063\204\064\202\067\153\074\145\075\206\076\216\111" +
    "\164\112\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\152\005\256\006\043\010\246\011\243\062\250" +
    "\063\204\064\260\067\153\074\145\075\262\076\216\077" +
    "\255\100\252\101\263\102\240\103\265\104\245\105\241" +
    "\106\257\107\254\110\322\111\247\112\150\114\u0177\001" +
    "\001\000\002\001\001\000\070\003\152\005\256\006\043" +
    "\010\246\011\u012b\041\154\046\u012c\047\u0167\050\u0175\051" +
    "\162\052\213\053\144\054\147\055\215\056\u015e\057\205" +
    "\060\u0161\061\177\062\226\063\204\064\202\067\153\074" +
    "\145\075\206\076\216\111\164\112\150\001\001\000\064" +
    "\003\152\005\256\006\043\010\246\011\243\062\250\063" +
    "\204\064\260\067\153\074\145\075\262\076\216\077\255" +
    "\100\252\101\263\102\240\103\265\104\245\105\241\106" +
    "\257\107\254\110\322\111\247\112\150\114\u017a\001\001" +
    "\000\002\001\001\000\070\003\152\005\256\006\043\010" +
    "\246\011\u012b\041\154\046\u0173\047\u017c\050\u0175\051\162" +
    "\052\213\053\144\054\147\055\215\056\u015e\057\205\060" +
    "\u0161\061\177\062\226\063\204\064\202\067\153\074\145" +
    "\075\206\076\216\111\164\112\150\001\001\000\002\001" +
    "\001\000\070\003\152\005\256\006\043\010\246\011\u012b" +
    "\041\154\046\u017e\047\u016d\050\u0175\051\162\052\213\053" +
    "\144\054\147\055\215\056\u015e\057\205\060\u0161\061\177" +
    "\062\226\063\204\064\202\067\153\074\145\075\206\076" +
    "\216\111\164\112\150\001\001\000\002\001\001\000\062" +
    "\003\152\005\256\006\043\010\246\011\u012b\041\154\046" +
    "\u017e\050\212\051\162\052\213\053\144\054\147\055\215" +
    "\057\205\061\177\062\226\063\204\064\202\067\153\074" +
    "\145\075\206\076\216\111\164\112\150\001\001\000\002" +
    "\001\001\000\062\003\152\005\256\006\043\010\246\011" +
    "\u012b\041\154\046\u0182\050\212\051\162\052\213\053\144" +
    "\054\147\055\215\057\205\061\177\062\226\063\204\064" +
    "\202\067\153\074\145\075\206\076\216\111\164\112\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\003\152\005\256\006\043" +
    "\010\246\011\243\062\250\063\204\064\260\065\u0187\066" +
    "\321\067\153\074\145\075\262\076\216\077\255\100\252" +
    "\101\263\102\240\103\265\104\245\105\241\106\257\107" +
    "\254\110\322\111\247\112\150\114\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\003" +
    "\152\005\256\006\043\010\246\011\243\062\250\063\204" +
    "\064\260\065\u018b\066\321\067\153\074\145\075\262\076" +
    "\216\077\255\100\252\101\263\102\240\103\265\104\245" +
    "\105\241\106\257\107\254\110\322\111\247\112\150\114" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\137\u0192\140\234\143\277\144\301\145\300" +
    "\146\335\147\334\150\333\151\332\152\327\153\331\154" +
    "\330\155\326\156\325\157\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\152\005" +
    "\256\006\043\010\246\011\243\062\250\063\204\064\260" +
    "\067\153\074\145\075\262\076\216\077\255\100\252\101" +
    "\263\102\240\103\265\104\245\105\241\106\257\107\254" +
    "\110\u0196\111\247\112\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\003\152\004\220\005\201\006\043\007\045\010\163\011" +
    "\156\041\154\042\u019c\043\214\044\210\045\211\046\172" +
    "\050\212\051\162\052\213\053\144\054\147\055\215\057" +
    "\205\061\177\062\226\063\204\064\202\067\153\074\145" +
    "\075\206\076\216\111\164\112\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\003\152" +
    "\004\220\005\201\006\043\007\045\010\163\011\156\041" +
    "\154\042\u019f\043\214\044\210\045\211\046\172\050\212" +
    "\051\162\052\213\053\144\054\147\055\215\057\205\061" +
    "\177\062\226\063\204\064\202\067\153\074\145\075\206" +
    "\076\216\111\164\112\150\001\001\000\004\131\u01a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\117\u01a3" +
    "\001\001\000\004\015\u01a4\001\001\000\002\001\001\000" +
    "\006\014\u01a6\017\006\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	if(first) {	Type.initTypes();
			Env.initFirst();
	}
	if(second) Env.initSecond();

    }

 

  public static Scanner s;
  public static int errors = 0;
  public static int warnings = 0;
  public static boolean first = true, second = false;

  public static void main(String argv[]) {

    for (int i = 0; i < argv.length; i++) {
      try {
        System.out.println("\n...Creating Symbol-Table for ["+argv[i]+"]...\n");
	  s = new Scanner(new FileReader(argv[i]));
        mjavac p = new mjavac(s);
        p.parse();
        System.out.println("Number of errors = " + errors + ".");
        System.out.println("Number of warnings = " + warnings + ".");
	  Type.printTypes();
	  first = false;
	  second = true;
        System.out.println("\n...Generating intermediate code for ["+argv[i]+"]...\n");
        s = new Scanner(new FileReader(argv[i]));
	  p = new mjavac(s);
        p.parse();
        System.out.println("Number of errors = " + errors + ".");
        System.out.println("Number of warnings = " + warnings + ".");
	  Type.printTypes();
      }
      catch (Exception e) {
        e.printStackTrace(System.out);
        System.exit(1);
      }
    }
  }
  
  public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }

  public void sem_error(String lexeme, String message) {
	errors++;
     	System.err.println("Error "+ s.current_lexeme() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }

  public void warning(String lexeme, String message) {
	warnings++;
     	System.err.println("Warning "+ s.current_lexeme());
      System.err.println("  "+ warnings + "==> " + message + ": "+ lexeme + "\n");
  } 
  
  public void report_fatal_error(String message, Object info) {
    	report_error(message, info);
    	throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


	class Sname {
	  public String name;
	  public Symb cs;
	  public Symb rs;

	  Sname(String n, Symb c, Symb r) {
		name = n;
		cs = c;
		rs = r;
	  }
	}


  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expression ::= assignment_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",74, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expression_opt ::= expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_opt",73, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expression_opt ::= 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_opt",73, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // left_hand_side ::= array_access 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("left_hand_side",72, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // left_hand_side ::= field_access 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("left_hand_side",72, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // left_hand_side ::= name 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		 			   	 RESULT = Type.errortype();
			   			     }
			   			     else RESULT = sn.cs.getType(); 
			   }
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("left_hand_side",72, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // assignment ::= error NT$34 EQ assignment_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assignment",71, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$34 ::= 
            {
              Type RESULT =null;
 parser.report_error("left_hand_side","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$34",109, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // assignment ::= left_hand_side EQ assignment_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) if(t1 != t2) if(t1.isNumber() && t2.isNumber()) { Type t = Type.max(t1, t2);
														     if(t2 != t) RESULT = t;
														     else { parser.sem_error(""+t1+", "+t2, "LEFT-HAND TYPE SHORTER THAN RIGHT-END TYPE");
																RESULT = Type.errortype();
														     }
								    }
								    else { parser.sem_error(""+t1+", "+t2, "INCOMPATIBLE TYPES");
				    					     RESULT = Type.errortype();
			   			   		    }
			   			   else RESULT = t1; 
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assignment",71, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // assignment_expression ::= assignment 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assignment_expression",70, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // assignment_expression ::= conditional_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assignment_expression",70, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // conditional_expression ::= error NT$33 QUESTION expression COLON conditional_or_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_expression",69, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$33 ::= 
            {
              Type RESULT =null;
 parser.report_error("conditional_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$33",108, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // conditional_expression ::= conditional_or_expression QUESTION expression COLON conditional_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t3 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isBool();
						     if(!b1) parser.sem_error(""+t1, "NOT A BOOLEAN");
			   			     if(t2 != t3) if(t2.isNumber() && t3.isNumber()) RESULT = Type.max(t2, t3);
									else { parser.sem_error(""+t2+", "+t3, "INCOMPATIBLE TYPES");
										 RESULT = Type.errortype();
									}
				    		     else RESULT = t2;	   
			   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_expression",69, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // conditional_expression ::= conditional_or_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_expression",69, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // conditional_or_expression ::= error NT$32 OROR conditional_and_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",68, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$32 ::= 
            {
              Type RESULT =null;
 parser.report_error("conditional_or_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$32",107, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // conditional_or_expression ::= conditional_or_expression OROR conditional_and_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isBool();
						     if(!b1) parser.sem_error(""+t1, "NOT A BOOLEAN");
			   			     boolean b2 = t2.isBool();
						     if(!b2) parser.sem_error(""+t2, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = t1;	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",68, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // conditional_or_expression ::= conditional_and_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_or_expression",68, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // conditional_and_expression ::= error NT$31 ANDAND equality_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$31 ::= 
            {
              Type RESULT =null;
 parser.report_error("conditional_and_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$31",106, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // conditional_and_expression ::= conditional_and_expression ANDAND equality_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isBool();
						     if(!b1) parser.sem_error(""+t1, "NOT A BOOLEAN");
			   			     boolean b2 = t2.isBool();
						     if(!b2) parser.sem_error(""+t2, "NOT A BOOLEAN");
				    		     if(b1 && b2) RESULT = t1;	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // conditional_and_expression ::= equality_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("conditional_and_expression",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // equality_expression ::= error NT$30 NOTEQ relational_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("equality_expression",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$30 ::= 
            {
              Type RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$30",105, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // equality_expression ::= error NT$29 EQEQ relational_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("equality_expression",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$29 ::= 
            {
              Type RESULT =null;
 parser.report_error("equality_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$29",104, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) if(t1 != t2) { parser.sem_error(""+t1+", "+t2, "INCOMPATIBLE TYPES");	   
			   			     			RESULT = Type.errortype();
						   }
 						   else RESULT = t1;
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("equality_expression",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) if(t1 != t2) { parser.sem_error(""+t1+", "+t2, "INCOMPATIBLE TYPES");	   
			   			     			RESULT = Type.errortype();
						   }
 						   else RESULT = t1;
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("equality_expression",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // equality_expression ::= relational_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("equality_expression",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // relational_expression ::= error NT$28 GTEQ additive_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$28 ::= 
            {
              Type RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$28",103, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // relational_expression ::= error NT$27 LTEQ additive_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$27 ::= 
            {
              Type RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$27",102, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // relational_expression ::= error NT$26 GT additive_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NT$26 ::= 
            {
              Type RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$26",101, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // relational_expression ::= error NT$25 LT additive_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NT$25 ::= 
            {
              Type RESULT =null;
 parser.report_error("relational_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$25",100, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // relational_expression ::= relational_expression GTEQ additive_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.bool();	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // relational_expression ::= relational_expression LTEQ additive_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.bool();	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // relational_expression ::= relational_expression GT additive_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.bool();	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // relational_expression ::= relational_expression LT additive_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.bool();	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // relational_expression ::= additive_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("relational_expression",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.max(t1, t2);	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("additive_expression",64, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.max(t1, t2);	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("additive_expression",64, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // additive_expression ::= multiplicative_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("additive_expression",64, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // multiplicative_expression ::= error NT$24 MOD unary_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$24 ::= 
            {
              Type RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$24",99, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // multiplicative_expression ::= error NT$23 DIV unary_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$23 ::= 
            {
              Type RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$23",98, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // multiplicative_expression ::= error NT$22 MULT unary_expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$22 ::= 
            {
              Type RESULT =null;
 parser.report_error("multiplicative_expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$22",97, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isInteger();
						     if(!b1) parser.sem_error(""+t1, "NOT AN INTEGER");
			   			     boolean b2 = t2.isInteger();
						     if(!b2) parser.sem_error(""+t2, "NOT AN INTEGER");
				    		     if(b1 && b2) RESULT = t1;	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.max(t1, t2);	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { boolean b1 = t1.isNumber();
						     if(!b1) parser.sem_error(""+t1, "NOT A NUMBER");
			   			     boolean b2 = t2.isNumber();
						     if(!b2) parser.sem_error(""+t2, "NOT A NUMBER");
				    		     if(b1 && b2) RESULT = Type.max(t1, t2);	   
			   			     else  RESULT = Type.errortype();
						   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // multiplicative_expression ::= unary_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // unary_expression ::= MINUS unary_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) if(!t.isNumber()) { parser.sem_error(""+t, "NOT A NUMBER");
				    		   			     RESULT = Type.errortype();
						   }	   
			   			   else  RESULT = t;
						    
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_expression",62, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // unary_expression ::= PLUS unary_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) if(!t.isNumber()) { parser.sem_error(""+t, "NOT A NUMBER");
				    		   			     RESULT = Type.errortype();
						   }	   
			   			   else  RESULT = t;
						    
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_expression",62, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // unary_expression ::= NOT unary_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) if(!t.isBool()) { parser.sem_error(""+t, "NOT A BOOLEAN");
				    		   			   RESULT = Type.errortype();
						   }	   
			   			   else  RESULT = t;
						    
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_expression",62, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // unary_expression ::= postfix_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("unary_expression",62, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // postfix_expression ::= AT name 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = Type.errortype();
			   }
			   else RESULT = sn.cs.getType(); 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("postfix_expression",61, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // postfix_expression ::= name 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     RESULT = Type.errortype();
			   }
			   else RESULT = sn.cs.getType(); 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("postfix_expression",61, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // postfix_expression ::= primary 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("postfix_expression",61, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // array_access ::= primary_no_new_array LBRACK expression RBRACK 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(!t2.isInteger()) { parser.sem_error(""+t2, "NOT AN INTEGER");
				    		       RESULT = Type.errortype();
			   } 
			   else RESULT = t1;
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_access",60, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // array_access ::= name LBRACK expression RBRACK 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = Type.errortype();
			   			     }
			   			     else { Type t1 = sn.cs.getType();
				    				if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
				    		 	   	    				RESULT = Type.errortype();
			   	    				}
			   	    				else{ Type array = ((Reference)t1).getReferred();
			   	   	    				if (!array.isArray()) { parser.sem_error(""+array, "NOT AN ARRAY");
				    		       	   	    				RESULT = Type.errortype();
			   	   	    				}
				   	    				else if(!t2.isInteger()) { parser.sem_error(""+t2, "NOT AN INTEGER");
				    		       	   		 			   RESULT = Type.errortype();
					  	   			     } 
					  	   			     else RESULT = ((Array)array).getBase();
			   	    			    }
			   			     }
			   }
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_access",60, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // method_invocation ::= SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_invocation",59, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // method_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.second) if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
				    		 	   			   RESULT = Type.errortype();
			   			   }
			   			   else{ Type name = ((Reference)t1).getReferred();
			   	   			   if (!name.isName()) { parser.sem_error(""+t1, "NOT A CLASS");
				    		       	 			 RESULT = Type.errortype();
			   	   			   }
			   	   			   else { Env e = ((Name)name).getEnv();  
			   		    			    Symb s = Env.get(n, e);
			   		    			    if(s == null) { parser.sem_error(n, "UNKNOWN NAME");
				    		 		  			  RESULT = Type.errortype();
			   	   	    			    }
			   		    			    else { Type t = s.getType();
						     			     if(!t.isMethod()) { parser.sem_error(""+t, "NOT A METHOD");
				    			    		       			 RESULT = Type.errortype();
			   	  		     			     }
			        		     			     else if(((Method)t).getDomain() != t2) { parser.sem_error(""+t2, "INCOMPATIBLE ARGUMENT WITH METHOD "+n);
				    					 							    RESULT = Type.errortype();
			   	  	   		    			    }
					   		    			    else if (!s.isPublic() && !Name.getCurrentClass().isSubclass(s.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE METHOD");				    					 				     			     				    			    RESULT = Type.errortype();
						  		   			   }
								   			   else RESULT = ((Method)t).getRange();
					    			    }			   	  
			   	   		   }
			   }
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_invocation",59, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // method_invocation ::= name LPAREN argument_list_opt RPAREN 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.second) { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   	      			   	 RESULT = Type.errortype();
			   			     }
			   			     else { Type t1 = sn.cs.getType();
				    				if(!t1.isMethod()) { parser.sem_error(""+t1, "NOT A METHOD");
				    		             			   RESULT = Type.errortype();
			   	    				}
			   	    				else if(sn.name.equals("printf")||sn.name.equals("scanf")) RESULT = Type.integer();										  	 						 
								     else if(((Method)t1).getDomain() != t2) { parser.sem_error(""+t2, "INCOMPATIBLE ARGUMENT WITH METHOD "+sn.name);
				    					 		  			           RESULT = Type.errortype();
			   	  	   			     	    }
					   			     	    else RESULT = ((Method)t1).getRange();
			   			     }
			   }
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_invocation",59, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // field_access ::= SUPER DOT IDENTIFIER 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { Name c = Name.getCurrentClass();
						     String sn = c.getSuper();						     
 			   			     if(sn == null){ parser.sem_error(""+c,"NOT A SUBCLASS");
				    	     				   RESULT = Type.errortype();
			   			     }
						     else {	Symb ss = Env.get(sn);
								Name sc = (Name)ss.getType();
						    		Symb s = Env.get(n, sc.getEnv());
			   			     		if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  	   RESULT = Type.errortype();
			   			     		} 
				  			      else RESULT = s.getType();
						     }
			   }
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_access",58, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // field_access ::= primary DOT IDENTIFIER 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.second) { if(!t.isReference()) { parser.sem_error(""+t, "NOT A REFERENCE");
				    					 	    RESULT = Type.errortype();
						     }
				  		     else { Type r = ((Reference)t).getReferred();
								if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
				    					 	      RESULT = Type.errortype();
						     		}
								else { Symb s = Env.get(n, ((Name)r).getEnv()); 
			   			     			 if(s == null){ parser.sem_error(n,"UNKNOWN NAME");
				    	     				  		    RESULT = Type.errortype();
			   			     			 } 
			   			     			 else if(!s.isPublic() && !Name.getCurrentClass().isSubclass(s.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE FIELD");
				    					 				     	     				 	     			RESULT = Type.errortype();
						  	    			}
				  			    			else RESULT = s.getType();
						     		}								
						     }
			   }
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_access",58, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // dims ::= dims LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dims",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // dims ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dims",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // dims_opt ::= dims 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dims_opt",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // dims_opt ::= 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dims_opt",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dim_expr ::= LBRACK expression RBRACK 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dim_expr",55, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // dim_exprs ::= error NT$21 dim_expr 
            {
              Type RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dim_exprs",54, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$21 ::= 
            {
              Type RESULT =null;
 parser.report_error("dim_expr","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$21",96, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // dim_exprs ::= dim_exprs dim_expr 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dim_exprs",54, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // dim_exprs ::= dim_expr 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dim_exprs",54, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // array_creation_expression ::= NEW name dim_exprs dims_opt 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.second) if(!t2.isInteger()) { parser.sem_error(""+t2, "NOT AN INTEGER");
				    			 			 RESULT = Type.errortype();
		   	   			   }
			   			   else { if(sn.cs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   			 			  	RESULT = Type.errortype();
			   	    			    }
			   	    			    else RESULT = Type.reference(Type.array(0, sn.cs.getType()));
			   			   }
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_creation_expression",53, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.second) if(!t2.isInteger()) { parser.sem_error(""+t2, "NOT AN INTEGER");
				    			 			 RESULT = Type.errortype();
		   				   }
			   			   else RESULT = Type.reference(Type.array(0, t1));
			   else RESULT = Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_creation_expression",53, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // argument_list ::= error NT$20 expression 
            {
              Type RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("argument_list",52, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NT$20 ::= 
            {
              Type RESULT =null;
 parser.report_error("argument_list","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$20",95, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // argument_list ::= argument_list COMMA expression 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = Type.product(t1, t2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("argument_list",52, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // argument_list ::= expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("argument_list",52, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // argument_list_opt ::= argument_list 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("argument_list_opt",51, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // argument_list_opt ::= 
            {
              Type RESULT =null;
		 RESULT = Type.voidtype(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("argument_list_opt",51, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // class_body_opt ::= class_body 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_opt",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // class_body_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_opt",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // class_instance_creation_expression ::= NEW name LPAREN argument_list_opt RPAREN class_body_opt 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 if(parser.second) { if(sn.rs == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				   		     			       RESULT = Type.errortype();
			   			     }
			   			     else { Type t = sn.rs.getType();
				    		     		if (!t.isName()) { parser.sem_error(""+t, "NOT A CLASS");
				    		           				 RESULT = Type.errortype();
			   	    		     		}
			   	    		     		else { Env e = ((Name)t).getEnv();
			   	    	     		      Symb s1 = Env.get(sn.name, e);
					     			Type t1 = s1.getType();
			   	    	     			if(!t1.isConstructor()) { parser.sem_error(""+t1, "NOT A CONSTRUCTOR");
				    			    	     		 		  RESULT = Type.errortype();
			   	    	     			}
			          	     			else if(((Constructor)t1).getDomain() != t2) { parser.sem_error(""+t2, "INCOMPATIBLE ARGUMENT WITH CONSTRUCTOR "+sn.name);
				    					 				  		     RESULT = Type.errortype();
			   	  	   	    		     }
					   	    		     else if (!s1.isPublic() && !Name.getCurrentClass().isSubclass(sn.rs.getOwner())) { parser.sem_error(sn.name, "ILLEGAL ACCESS TO PRIVATE CONSTRUCTOR");
				    					 				     			     	      			          RESULT = Type.errortype();
						  	   		    }
						  	   		    else RESULT = ((Constructor)t1).getRange();
			 	    		     }
			   			   }
			   }
			   else RESULT =Type.voidtype();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_instance_creation_expression",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // primary_no_new_array ::= error NT$19 DOT THIS 
            {
              Type RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$19 ::= 
            {
              Type RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$19",94, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // primary_no_new_array ::= LPAREN error NT$18 RPAREN 
            {
              Type RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$18 ::= 
            {
              Type RESULT =null;
 parser.report_error("primary_no_new_array","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$18",93, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // primary_no_new_array ::= name DOT THIS 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // primary_no_new_array ::= name DOT CLASS 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // primary_no_new_array ::= array_type DOT CLASS 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // primary_no_new_array ::= VOID DOT CLASS 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // primary_no_new_array ::= primitive_type DOT CLASS 
            {
              Type RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // primary_no_new_array ::= array_access 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // primary_no_new_array ::= method_invocation 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // primary_no_new_array ::= field_access 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // primary_no_new_array ::= class_instance_creation_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // primary_no_new_array ::= LPAREN expression RPAREN 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // primary_no_new_array ::= THIS 
            {
              Type RESULT =null;
		 RESULT = Type.reference(Name.getCurrentClass()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // primary_no_new_array ::= literal 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary_no_new_array",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // primary ::= array_creation_expression 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // primary ::= primary_no_new_array 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primary",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // return_statement ::= RETURN expression_opt SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.second) { Type r = Method.getCurrent().getRange();
						    if(t != r) parser.sem_error(""+t+", "+r, "INCOMPATIBLE TYPES");
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("return_statement",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_statement_no_short_if ::= WHILE LPAREN expression RPAREN statement_no_short_if 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 if(parser.second) if(!t.isBool()) parser.sem_error(""+t, "NOT A BOOLEAN");	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_statement_no_short_if",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // while_statement ::= WHILE error NT$17 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_statement",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$17 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$17",92, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 if(parser.second) if(!t.isBool()) parser.sem_error(""+t, "NOT A BOOLEAN");	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_statement",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if_then_else_statement_no_short_if ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		 if(parser.second) if(!t.isBool()) parser.sem_error(""+t, "NOT A BOOLEAN");	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_then_else_statement_no_short_if",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if_then_else_statement ::= IF LPAREN error NT$16 RPAREN statement_no_short_if ELSE statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$16 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$16",91, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_then_else_statement ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		 if(parser.second) if(!t.isBool()) parser.sem_error(""+t, "NOT A BOOLEAN");	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_then_else_statement",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_then_statement ::= IF error NT$15 RPAREN statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_then_statement",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$15 ::= 
            {
              Object RESULT =null;
 parser.report_error("if_then_statement","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$15",90, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // if_then_statement ::= IF LPAREN expression RPAREN statement 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 if(parser.second) if(!t.isBool()) parser.sem_error(""+t, "NOT A BOOLEAN");	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_then_statement",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // statement_expression ::= class_instance_creation_expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // statement_expression ::= method_invocation 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // statement_expression ::= assignment 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_statement ::= statement_expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_statement",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // empty_statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("empty_statement",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // statement_without_trailing_substatement ::= return_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // statement_without_trailing_substatement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // statement_without_trailing_substatement ::= empty_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement_without_trailing_substatement ::= block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_without_trailing_substatement",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_no_short_if",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement ::= if_then_else_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement ::= if_then_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement ::= statement_without_trailing_substatement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // local_variable_declaration_statement ::= type error NT$14 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$14 ::= 
            {
              Object RESULT =null;
 parser.report_error("local_variable_declaration_statement","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$14",89, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // local_variable_declaration_statement ::= type variable_declarators SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("local_variable_declaration_statement",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // block_statement ::= statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block_statement",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // block_statement ::= local_variable_declaration_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block_statement",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // block_statements ::= error NT$13 block_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block_statements",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$13 ::= 
            {
              Object RESULT =null;
 parser.report_error("block_statements","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$13",88, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // block_statements ::= block_statements block_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block_statements",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // block_statements ::= block_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block_statements",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // block_statements_opt ::= block_statements 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block_statements_opt",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // block_statements_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block_statements_opt",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // block ::= LBRACE NT$11 block_statements_opt NT$12 RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
 System.out.println(" BLOCK EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$12",87, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$11 ::= 
            {
              Object RESULT =null;
 System.out.println(" BLOCK ENTRY");
			   if(parser.first) Env.push(); 
			   if(parser.second) Env.next();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$11",86, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // explicit_constructor_invocation ::= primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // explicit_constructor_invocation ::= primary DOT THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // explicit_constructor_invocation ::= SUPER LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // explicit_constructor_invocation ::= THIS LPAREN argument_list_opt RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("explicit_constructor_invocation",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // constructor_body ::= LBRACE block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constructor_body",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constructor_body ::= LBRACE explicit_constructor_invocation block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" CONSTRUCTOR EXIT");
			   if(parser.first) Env.pop(); 
			   if(parser.second) Env.next();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constructor_body",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constructor_declarator ::= modifiers_opt IDENTIFIER NT$10 LPAREN formal_parameter_list_opt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.constructor(t, Type.reference(Type.getName(n))), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC CONSTRUCTOR DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.constructor(t, Type.reference(Type.getName(n))), c, false);
			   			    }	
			   			    Env.putSymb(n, s);
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constructor_declarator",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$10 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    else { Name c = Name.getCurrentClass();
			   			    	     String cname = c.getName();
						    	     if (!n.equals(cname)) parser.sem_error(n+", "+cname,"CONSTRUCTOR NAME DIFFERENT FROM CLASS NAME");
						    }
						    System.out.println(" CONSTRUCTOR ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" CONSTRUCTOR ENTRY: "+n);
						     Env.next();
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$10",85, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constructor_declaration ::= constructor_declarator constructor_body 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constructor_declaration",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_body ::= SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop();
			   if(parser.second) Env.next(); 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_body",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_body ::= LBRACE block_statements_opt RBRACE 
            {
              Object RESULT =null;
		 System.out.println(" METHOD EXIT");
			   if(parser.first) Env.pop();
			   if(parser.second) Env.next(); 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_body",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // formal_parameter ::= type variable_declarator_id 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("formal_parameter",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // formal_parameter_list ::= error NT$9 formal_parameter 
            {
              Type RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$9 ::= 
            {
              Type RESULT =null;
 parser.report_error("formal_parameter_list","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$9",84, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = Type.product(t1, t2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // formal_parameter_list ::= formal_parameter 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // formal_parameter_list_opt ::= 
            {
              Type RESULT =null;
		 RESULT = Type.voidtype(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_opt",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_header ::= error NT$8 LPAREN formal_parameter_list_opt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_header",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.report_error("method_header","WRONG");
			   Env.push();
 			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$8",83, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // method_header ::= modifiers_opt VOID IDENTIFIER NT$7 LPAREN formal_parameter_list_opt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(t, Type.voidtype()), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(t, Type.voidtype()), c, false);
			   			    }
			   			    Env.putSymb(n, s);
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Method.putCurrent(n, (Method)msymb.getType());						     
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_header",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$7 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 				    Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$7",82, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // method_header ::= modifiers_opt type IDENTIFIER NT$6 LPAREN formal_parameter_list_opt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method(t2, t1), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method(t2, t1), c, false);
			   			    }
			   			    Env.putSymb(n, s); 
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Method.putCurrent(n, (Method)msymb.getType());						     
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_header",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$6 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 			          Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$6",81, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_declaration ::= method_header method_body 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_declaration",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_declarator_id ::= variable_declarator_id LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_declarator_id ::= IDENTIFIER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.first) { Boolean m = (Boolean)((java_cup.runtime.Symbol)CUP$mjavac$stack.elementAt(CUP$mjavac$top-2)).value;
			   			    boolean mod = m == null ? false: m.booleanValue();	
			  			    Type t = (Type)((java_cup.runtime.Symbol)CUP$mjavac$stack.elementAt(CUP$mjavac$top-1)).value;
			   			    Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(t, c, mod);
			   			    else { if(mod) parser.warning(n, "PUBLIC FIELD DECLARED IN PRIVATE CLASS");
				    			     s = new Symb(t, c, false);
			   			    }
			   			    if (!Env.putVar(n, s)) parser.sem_error(n,"DUPLICATE NAME");
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarator_id",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // M1 ::= 
            {
              Type RESULT =null;
		 RESULT = (Type)((java_cup.runtime.Symbol)CUP$mjavac$stack.elementAt(CUP$mjavac$top-2)).value; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("M1",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_declarators ::= error NT$5 COMMA variable_declarator_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarators",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarator_id","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$5",80, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_declarators ::= variable_declarators COMMA M1 variable_declarator_id 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarators",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_declarators ::= variable_declarator_id 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarators",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field_declaration ::= modifiers_opt type error NT$4 method_declaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declaration",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.report_error("field_declaration","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$4",79, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_declaration ::= modifiers_opt type error NT$3 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declaration",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.report_error("variable_declarators","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$3",78, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_declaration ::= modifiers_opt type variable_declarators SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declaration",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class_member_declaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_member_declaration",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // class_member_declaration ::= method_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_member_declaration",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // class_member_declaration ::= field_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_member_declaration",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // class_body_declaration ::= block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_declaration",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // class_body_declaration ::= constructor_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_declaration",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // class_body_declaration ::= class_member_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_declaration",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // class_body_declarations ::= class_body_declarations class_body_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_declarations",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // class_body_declarations ::= class_body_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_declarations",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // class_body_declarations_opt ::= class_body_declarations 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // class_body_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body_declarations_opt",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // class_body ::= LBRACE class_body_declarations_opt RBRACE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_body",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // class_declaration ::= modifiers_opt CLASS IDENTIFIER EXTENDS IDENTIFIER NT$2 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.first) { Env.pop();
						    Env.pop();
			   }
			   if(parser.second) { Env.next();
						     Env.next();
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_declaration",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n2 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 if(parser.first) switch (Env.putClass(n1, m.booleanValue(),n2)){ case 1: parser.sem_error(n1,"DUPLICATE CLASS NAME");
							     								    break;
													        case 2: parser.sem_error(n2,"UNKNOWN CLASS");
					        }
  			   if(parser.second) { Env.next();
						     Env.next();
						     Name c = (Env.get(n1)).getOwner();
						     Name.putCurrentClass(c);
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$2",77, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // class_declaration ::= modifiers_opt CLASS IDENTIFIER NT$1 class_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 System.out.println("CLASS EXIT: "+n1);
			   if(parser.first) Env.pop();
			   if(parser.second) Env.next();
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_declaration",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) if (Env.putClass(n1, m.booleanValue()) != 0) parser.sem_error(n1,"DUPLICATE CLASS NAME");
 			   if(parser.second) { Env.next();
						     Name c = (Env.get(n1)).getOwner();
						     Name.putCurrentClass(c);
			   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$1",76, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // class_declarations ::= error NT$0 class_declaration 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_declarations",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error("class_declaration","WRONG"); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",75, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_declarations ::= class_declarations class_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_declarations",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_declarations ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_declarations",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modifiers_opt ::= PUBLIC 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifiers_opt",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modifiers_opt ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifiers_opt",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // name ::= name DOT IDENTIFIER 
            {
              Sname RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Symb s1 = sn.cs;
			   if(s1 == null) { parser.sem_error(sn.name, "UNKNOWN NAME");
						  RESULT = new Sname(n, null, null);
			   }
			   else { Type t1 = s1.getType();
				    if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
								    RESULT = new Sname(n, null, null);
				    }
				    else { Type r = ((Reference)t1).getReferred();
					     if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
								     RESULT = new Sname(n, null, null);
					     }
					     else { Symb s2 = Env.get(n, ((Name)r).getEnv()); 
			   			     	if(s2 == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									     RESULT = new Sname(n, null, null);
							}
			   			     	else if (!s2.isPublic() && !Name.getCurrentClass().isSubclass(s2.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  RESULT = new Sname(n, null, null);
						  	     }
						  	     else RESULT = new Sname(n, s2, Env.get(n, Env.getRoot()));
					     }								
				    }
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // name ::= IDENTIFIER 
            {
              Sname RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.first) RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot())); 
			   if(parser.second) RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot()));
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // array_type ::= name dims 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Symb s = sn.cs; 
			   if(s == null) { parser.sem_error(sn.name,"UNKNOWN NAME");
				    		 RESULT = Type.errortype();
			   } 
			   else RESULT = Type.array(0, s.getType());
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // array_type ::= primitive_type dims 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = Type.array(0, t); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_type",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reference_type ::= array_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = Type.reference(t); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reference_type ::= name 
            {
              Type RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Symb s = sn.rs; 
			   if(s == null) RESULT = Type.reference(Type.forwardName(sn.name, parser.s.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("reference_type",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // numeric_type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.floating(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numeric_type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Type.character(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numeric_type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.integer(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_type",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // primitive_type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.bool(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // primitive_type ::= numeric_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("primitive_type",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= reference_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= primitive_type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal ::= NULL_LITERAL 
            {
              Type RESULT =null;
		 RESULT = Type.reference(Type.voidtype()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= STRING_LITERAL 
            {
              Type RESULT =null;
		 Symb s = Env.get("String", Env.getRoot()); 
			   if(s == null) RESULT = Type.reference(Type.forwardName("String", parser.s.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= CHARACTER_LITERAL 
            {
              Type RESULT =null;
		 RESULT = Type.character(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal ::= BOOLEAN_LITERAL 
            {
              Type RESULT =null;
		 RESULT = Type.bool(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= FLOATING_POINT_LITERAL 
            {
              Type RESULT =null;
		 RESULT = Type.floating(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              Type RESULT =null;
		 RESULT = Type.integer(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= class_declarations 
            {
              Object RESULT =null;
		 Hashtable forwards;
			   if(parser.first) { forwards = Name.ForwardHashtable();
						    int err = forwards.size();
						    if(err > 0) { parser.errors = parser.errors + err;
     						    	     		System.err.println("Error : Semantic error");
      					    	     		System.err.println("  ==> CANNOT FIND CLASSES ("+err+"): "+forwards+"\n");
						    }
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

