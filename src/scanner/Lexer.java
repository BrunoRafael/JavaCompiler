/* The following code was generated by JFlex 1.4.3 on 6/8/15 5:06 PM */

package scanner;

import java_cup.runtime.*;
import parser.Sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/8/15 5:06 PM from the specification file
 * <tt>C:/Users/bruno.rafael/Documents/JavaCompiler/LexerEspecification.lex</tt>
 */
public class Lexer implements Sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INIT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\63"+
    "\1\16\1\0\1\6\1\73\1\67\1\74\1\50\1\51\1\5\1\71"+
    "\1\57\1\15\1\13\1\4\1\10\1\76\1\75\1\102\1\77\1\11"+
    "\1\103\1\100\1\101\1\11\1\66\1\56\1\62\1\60\1\61\1\65"+
    "\1\0\3\6\1\104\1\14\6\6\1\12\16\6\1\54\1\17\1\55"+
    "\1\72\1\6\1\0\1\23\1\24\1\26\1\37\1\31\1\41\1\44"+
    "\1\34\1\35\1\6\1\32\1\30\1\42\1\21\1\27\1\43\1\6"+
    "\1\22\1\25\1\20\1\36\1\45\1\46\1\40\1\33\1\47\1\52"+
    "\1\70\1\53\1\64\41\7\2\0\4\6\4\0\1\6\2\0\1\7"+
    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6"+
    "\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7"+
    "\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0"+
    "\236\6\11\0\46\6\2\0\1\6\7\0\47\6\11\0\55\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0"+
    "\3\6\15\0\4\7\7\0\1\6\4\0\13\7\5\0\53\6\37\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"+
    "\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7"+
    "\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7"+
    "\1\6\3\7\1\6\5\7\22\0\31\6\3\7\244\0\4\7\66\6"+
    "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0"+
    "\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0"+
    "\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7"+
    "\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0"+
    "\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7"+
    "\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0"+
    "\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7"+
    "\15\6\14\7\1\6\17\7\2\0\46\6\12\0\53\6\1\0\1\6"+
    "\3\0\u0149\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6"+
    "\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6"+
    "\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6"+
    "\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0"+
    "\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6"+
    "\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0"+
    "\3\7\36\6\12\7\3\0\2\6\12\7\6\0\46\6\16\7\14\0"+
    "\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7"+
    "\1\0\25\7\4\6\1\7\4\6\1\7\15\0\300\6\47\7\25\0"+
    "\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7"+
    "\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7"+
    "\1\0\1\6\15\0\1\6\20\0\15\6\3\0\32\6\26\0\15\7"+
    "\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\7\16\0\46\6\12\0\66\6\11\0\1\6\17\0\1\7\27\6"+
    "\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6"+
    "\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0"+
    "\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51cc\6\64\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7"+
    "\2\6\24\0\57\6\1\7\14\0\2\7\1\0\31\6\10\0\120\6"+
    "\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0\2\6\16\0"+
    "\12\6\120\0\10\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7"+
    "\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7"+
    "\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0"+
    "\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6"+
    "\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0"+
    "\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6"+
    "\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6"+
    "\43\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6"+
    "\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0"+
    "\27\6\4\0\61\6\u2104\0\u012e\6\2\0\76\6\2\0\152\6\46\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\20\4\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\1\1\0\1\41\1\42\1\43\1\44"+
    "\1\43\1\0\1\45\1\46\1\47\1\0\27\4\1\50"+
    "\1\4\1\51\13\4\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\2\0\1\43\2\0"+
    "\1\4\1\74\4\4\1\75\24\4\1\76\5\4\1\77"+
    "\12\4\1\100\1\101\1\102\1\0\1\1\1\0\1\4"+
    "\1\103\1\4\1\104\1\4\1\105\4\4\1\106\7\4"+
    "\1\107\3\4\1\110\1\111\1\112\16\4\1\113\1\4"+
    "\1\114\1\4\1\115\1\0\1\4\1\116\3\4\1\117"+
    "\4\4\1\120\1\121\1\4\1\122\1\4\1\123\1\124"+
    "\7\4\1\125\1\126\1\127\5\4\1\130\1\0\1\4"+
    "\1\131\1\132\1\133\3\4\1\134\1\4\1\135\4\4"+
    "\1\136\1\4\1\137\5\4\1\140\1\4\1\0\2\4"+
    "\1\141\3\4\1\142\3\4\1\143\1\144\1\4\1\145"+
    "\1\146\1\4\1\0\1\4\1\147\1\150\1\4\1\151"+
    "\4\4\1\152\1\0\1\153\1\4\1\154\2\4\1\155"+
    "\1\0\1\4\1\156\1\157\1\160\1\4\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\317\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\317\0\317\0\317\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f"+
    "\0\317\0\u09b4\0\317\0\u09f9\0\u0a3e\0\u0a83\0\317\0\317"+
    "\0\u0ac8\0\317\0\u0b0d\0\u0b52\0\317\0\317\0\317\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf"+
    "\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u019e"+
    "\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\317\0\317\0\u1590"+
    "\0\317\0\u15d5\0\317\0\317\0\317\0\317\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\317\0\317\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u019e\0\u17b8\0\u17fd"+
    "\0\u1842\0\u1887\0\u019e\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u019e\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\317\0\u2280\0\317\0\u22c5\0\u161a\0\u230a\0\u234f\0\u019e"+
    "\0\u2394\0\u019e\0\u23d9\0\u019e\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u019e\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0"+
    "\0\u019e\0\u2715\0\u275a\0\u279f\0\u019e\0\u019e\0\u019e\0\u27e4"+
    "\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c"+
    "\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u019e\0\u2baa\0\u019e"+
    "\0\u2bef\0\317\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u019e\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u019e\0\u019e\0\u2ee6"+
    "\0\u019e\0\u2f2b\0\u019e\0\u019e\0\u2f70\0\u2fb5\0\u2ffa\0\u303f"+
    "\0\u3084\0\u30c9\0\u310e\0\u019e\0\u019e\0\u3153\0\u3198\0\u31dd"+
    "\0\u3222\0\u3267\0\u32ac\0\u019e\0\u32f1\0\u3336\0\u019e\0\u019e"+
    "\0\u019e\0\u337b\0\u33c0\0\u3405\0\u019e\0\u344a\0\u019e\0\u348f"+
    "\0\u34d4\0\u3519\0\u355e\0\u019e\0\u35a3\0\u019e\0\u35e8\0\u362d"+
    "\0\u3672\0\u36b7\0\u36fc\0\u019e\0\u3741\0\u3786\0\u37cb\0\u3810"+
    "\0\u019e\0\u3855\0\u389a\0\u38df\0\u019e\0\u3924\0\u3969\0\u39ae"+
    "\0\u019e\0\u019e\0\u39f3\0\u019e\0\u019e\0\u3a38\0\u3a7d\0\u3ac2"+
    "\0\u019e\0\u019e\0\u3b07\0\u019e\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b"+
    "\0\u019e\0\u3c60\0\u019e\0\u3ca5\0\u019e\0\u3cea\0\u3d2f\0\u019e"+
    "\0\u3d74\0\u3db9\0\u019e\0\u019e\0\317\0\u3dfe\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\7\1\0\1\10"+
    "\1\11\1\7\1\12\1\7\1\13\1\14\1\0\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\7\1\24"+
    "\1\25\3\7\1\26\1\7\1\27\1\7\1\30\1\7"+
    "\1\31\1\32\1\33\1\34\1\7\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\7\11\1\7\1\62\2\0\13\62\1\63"+
    "\1\64\65\62\2\0\1\4\213\0\1\65\1\66\52\0"+
    "\1\67\104\0\1\70\32\0\5\7\1\0\1\7\3\0"+
    "\30\7\25\0\10\7\10\0\2\71\1\72\1\73\1\74"+
    "\13\0\1\72\1\74\5\0\1\75\35\0\7\71\1\75"+
    "\10\0\2\11\1\72\1\73\1\74\13\0\1\72\1\74"+
    "\5\0\1\75\35\0\7\11\1\75\10\0\2\73\63\0"+
    "\7\73\16\0\1\76\42\0\1\77\14\0\1\100\15\0"+
    "\5\7\1\0\1\7\3\0\2\7\1\101\11\7\1\102"+
    "\13\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\3\7\1\103\5\7\1\104\4\7\1\105\11\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\11\7\1\106"+
    "\16\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\4\7\1\107\23\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\2\7\1\110\4\7\1\111\3\7\1\112"+
    "\14\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\1\113\12\7\1\114\1\115\1\7\1\116\7\7\1\117"+
    "\1\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\3\7\1\120\3\7\1\121\1\122\3\7\1\123\13\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\7\7"+
    "\1\124\20\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\10\7\1\125\7\7\1\126\7\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\1\7\1\127\17\7"+
    "\1\130\1\131\5\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\7\7\1\132\1\7\1\133\16\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\3\7\1\134"+
    "\3\7\1\135\1\136\4\7\1\137\12\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\2\7\1\140\1\141"+
    "\12\7\1\142\11\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\7\7\1\143\20\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\7\7\1\144\20\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\14\7\1\145"+
    "\13\7\25\0\10\7\60\0\1\146\104\0\1\147\1\150"+
    "\103\0\1\151\1\0\1\152\102\0\1\153\104\0\1\154"+
    "\6\0\1\155\75\0\1\156\7\0\1\157\74\0\1\160"+
    "\10\0\1\161\73\0\1\162\104\0\1\163\24\0\1\62"+
    "\2\0\13\62\2\0\65\62\16\0\1\164\1\0\1\165"+
    "\1\166\1\167\62\0\1\65\1\3\1\4\102\65\5\170"+
    "\1\171\77\170\10\0\2\71\1\0\1\73\1\74\14\0"+
    "\1\74\5\0\1\75\35\0\7\71\1\75\10\0\2\73"+
    "\2\0\1\74\14\0\1\74\5\0\1\75\35\0\7\73"+
    "\1\75\10\0\2\172\3\0\1\173\53\0\1\173\3\0"+
    "\7\172\77\0\1\174\14\0\5\7\1\0\1\7\3\0"+
    "\3\7\1\175\7\7\1\176\2\7\1\177\11\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\2\7\1\200"+
    "\12\7\1\201\12\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\1\202\27\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\26\7\1\203\1\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\10\7\1\204\17\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\205"+
    "\27\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\5\7\1\206\22\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\11\7\1\207\16\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\7\7\1\210\20\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\1\211\27\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\2\7"+
    "\1\212\1\213\24\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\1\7\1\214\26\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\7\7\1\215\20\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\23\7\1\216"+
    "\4\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\15\7\1\217\12\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\1\220\4\7\1\221\22\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\1\7\1\222\26\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\3\7"+
    "\1\223\24\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\3\7\1\224\24\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\1\7\1\225\26\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\5\7\1\226\22\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\227"+
    "\27\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\1\230\4\7\1\231\22\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\23\7\1\232\4\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\16\7\1\233\11\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\21\7"+
    "\1\234\6\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\10\7\1\235\17\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\2\7\1\236\25\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\7\7\1\237\20\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\7"+
    "\1\240\26\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\7\7\1\241\5\7\1\242\12\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\6\7\1\243\21\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\4\7"+
    "\1\244\23\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\1\245\27\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\10\7\1\246\4\7\1\247\12\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\15\7\1\250"+
    "\12\7\25\0\10\7\60\0\1\251\1\252\103\0\1\253"+
    "\24\0\5\170\1\254\103\170\1\255\1\254\77\170\10\0"+
    "\2\172\25\0\1\75\35\0\7\172\1\75\10\0\2\172"+
    "\63\0\7\172\100\0\1\256\13\0\5\7\1\0\1\7"+
    "\3\0\1\7\1\257\26\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\11\7\1\260\16\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\7\7\1\261\20\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\5\7"+
    "\1\262\22\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\15\7\1\263\12\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\10\7\1\264\17\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\16\7\1\265\11\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\266"+
    "\27\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\3\7\1\267\24\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\10\7\1\270\17\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\11\7\1\271\16\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\15\7\1\272"+
    "\12\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\1\273\27\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\6\7\1\274\21\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\2\7\1\275\25\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\11\7\1\276\16\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\277"+
    "\27\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\6\7\1\300\21\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\11\7\1\301\16\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\1\302\4\7\1\303\22\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\5\7"+
    "\1\304\22\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\2\7\1\305\25\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\24\7\1\306\3\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\11\7\1\307\16\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\11\7"+
    "\1\310\16\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\11\7\1\311\16\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\1\312\27\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\7\7\1\313\1\314\17\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\4\7"+
    "\1\315\23\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\3\7\1\316\24\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\5\7\1\317\22\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\3\7\1\320\24\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\3\7"+
    "\1\321\24\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\1\322\27\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\25\7\1\323\2\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\12\7\1\324\15\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\10\7\1\325"+
    "\17\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\7\7\1\326\20\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\3\7\1\327\24\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\17\7\1\330\10\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\10\7\1\331"+
    "\17\7\25\0\10\7\60\0\1\332\24\0\4\170\1\4"+
    "\1\254\77\170\100\0\1\333\12\0\5\7\1\0\1\7"+
    "\3\0\5\7\1\334\22\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\26\7\1\335\1\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\25\7\1\336\2\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\2\7"+
    "\1\337\25\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\2\7\1\340\25\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\12\7\1\341\15\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\11\7\1\342\16\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\6\7"+
    "\1\343\21\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\15\7\1\344\12\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\14\7\1\345\13\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\1\346\27\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\2\7\1\347"+
    "\25\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\6\7\1\350\21\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\14\7\1\351\13\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\15\7\1\352\12\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\1\353\27\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\5\7"+
    "\1\354\22\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\1\7\1\355\26\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\2\7\1\356\25\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\3\7\1\357\24\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\2\7"+
    "\1\360\25\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\11\7\1\361\16\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\10\7\1\362\17\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\16\7\1\363\11\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\11\7"+
    "\1\364\16\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\1\365\27\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\10\7\1\366\17\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\11\7\1\367\16\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\3\7\1\370"+
    "\24\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\3\7\1\371\24\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\15\7\1\372\12\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\1\373\27\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\11\7\1\374\16\7"+
    "\25\0\10\7\77\0\1\375\13\0\5\7\1\0\1\7"+
    "\3\0\15\7\1\376\12\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\5\7\1\377\22\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\11\7\1\u0100\16\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\7"+
    "\1\u0101\26\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\3\7\1\u0102\24\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\3\7\1\u0103\24\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\1\u0104\27\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\6\7\1\u0105"+
    "\21\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\2\7\1\u0106\25\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\14\7\1\u0107\13\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\1\7\1\u0108\26\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\17\7\1\u0109"+
    "\10\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\21\7\1\u010a\6\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\1\7\1\u010b\26\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\1\u010c\27\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\22\7\1\u010d\5\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\11\7"+
    "\1\u010e\16\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\10\7\1\u010f\17\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\10\7\1\u0110\17\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\6\7\1\u0111\21\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\u0112"+
    "\27\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\24\7\1\u0113\3\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\6\7\1\u0114\21\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\15\7\1\u0115\12\7\25\0"+
    "\10\7\101\0\1\u0116\11\0\5\7\1\0\1\7\3\0"+
    "\11\7\1\u0117\16\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\6\7\1\u0118\21\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\1\7\1\u0119\26\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\21\7\1\u011a"+
    "\6\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\7\7\1\u011b\20\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\16\7\1\u011c\11\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\5\7\1\u011d\22\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\3\7\1\u011e"+
    "\24\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\6\7\1\u011f\21\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\11\7\1\u0120\16\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\1\u0121\27\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\13\7\1\u0122\14\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\1\u0123"+
    "\27\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\11\7\1\u0124\16\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\11\7\1\u0125\16\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\10\7\1\u0126\17\7\25\0"+
    "\10\7\102\0\1\u0127\10\0\5\7\1\0\1\7\3\0"+
    "\1\7\1\u0128\26\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\1\u0129\27\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\23\7\1\u012a\4\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\1\7\1\u012b\26\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\11\7"+
    "\1\u012c\16\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\6\7\1\u012d\21\7\25\0\10\7\6\0\5\7"+
    "\1\0\1\7\3\0\11\7\1\u012e\16\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\1\7\1\u012f\26\7"+
    "\25\0\10\7\6\0\5\7\1\0\1\7\3\0\11\7"+
    "\1\u0130\16\7\25\0\10\7\6\0\5\7\1\0\1\7"+
    "\3\0\11\7\1\u0131\16\7\25\0\10\7\103\0\1\u0132"+
    "\7\0\5\7\1\0\1\7\3\0\1\u0133\27\7\25\0"+
    "\10\7\6\0\5\7\1\0\1\7\3\0\15\7\1\u0134"+
    "\12\7\25\0\10\7\6\0\5\7\1\0\1\7\3\0"+
    "\11\7\1\u0135\16\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\7\7\1\u0136\20\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\1\u0137\27\7\25\0\10\7"+
    "\6\0\5\7\1\0\1\7\3\0\17\7\1\u0138\10\7"+
    "\25\0\10\7\77\0\1\u0139\13\0\5\7\1\0\1\7"+
    "\3\0\27\7\1\u013a\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\21\7\1\u013b\6\7\25\0\10\7\6\0"+
    "\5\7\1\0\1\7\3\0\5\7\1\u013c\22\7\25\0"+
    "\10\7\101\0\1\u013d\11\0\5\7\1\0\1\7\3\0"+
    "\11\7\1\u013e\16\7\25\0\10\7\6\0\5\7\1\0"+
    "\1\7\3\0\17\7\1\u013f\10\7\25\0\10\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15939];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\7\1\1\11\20\1\10\11\4\1"+
    "\3\11\5\1\1\11\1\1\1\11\2\1\1\0\2\11"+
    "\1\1\1\11\1\1\1\0\3\11\1\0\45\1\2\11"+
    "\1\1\1\11\1\1\15\11\2\0\1\1\2\0\54\1"+
    "\1\11\1\1\1\11\1\0\1\1\1\0\53\1\1\11"+
    "\1\0\41\1\1\0\30\1\1\0\20\1\1\0\12\1"+
    "\1\0\6\1\1\0\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          { return symbol(GTEQ);
          }
        case 114: break;
        case 27: 
          { return symbol(XOR);
          }
        case 115: break;
        case 18: 
          { return symbol(GT);
          }
        case 116: break;
        case 107: 
          { return symbol(TRANSIENT);
          }
        case 117: break;
        case 104: 
          { return symbol(STRICTFP);
          }
        case 118: break;
        case 47: 
          { return symbol(NOTEQ);
          }
        case 119: break;
        case 8: 
          { yybegin(STRING); string.setLength(0);
          }
        case 120: break;
        case 70: 
          { return symbol(BYTE);
          }
        case 121: break;
        case 11: 
          { return symbol(LBRACE);
          }
        case 122: break;
        case 17: 
          { return symbol(EQ);
          }
        case 123: break;
        case 38: 
          { return symbol(MINUSMINUS);
          }
        case 124: break;
        case 105: 
          { return symbol(CONTINUE);
          }
        case 125: break;
        case 37: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 126: break;
        case 92: 
          { return symbol(STATIC);
          }
        case 127: break;
        case 41: 
          { return symbol(DO);
          }
        case 128: break;
        case 53: 
          { return symbol(PLUSPLUS);
          }
        case 129: break;
        case 106: 
          { return symbol(VOLATILE);
          }
        case 130: break;
        case 19: 
          { return symbol(LT);
          }
        case 131: break;
        case 98: 
          { return symbol(EXTENDS);
          }
        case 132: break;
        case 89: 
          { return symbol(THROWS);
          }
        case 133: break;
        case 48: 
          { return symbol(ANDEQ);
          }
        case 134: break;
        case 96: 
          { return symbol(PUBLIC);
          }
        case 135: break;
        case 55: 
          { return symbol(MODEQ);
          }
        case 136: break;
        case 58: 
          { string.append('\n');
          }
        case 137: break;
        case 56: 
          { string.append('\"');
          }
        case 138: break;
        case 103: 
          { return symbol(ABSTRACT);
          }
        case 139: break;
        case 97: 
          { return symbol(BOOLEAN);
          }
        case 140: break;
        case 80: 
          { return symbol(SHORT);
          }
        case 141: break;
        case 78: 
          { return symbol(THROW);
          }
        case 142: break;
        case 29: 
          { yybegin(CHARLITERAL);
          }
        case 143: break;
        case 42: 
          { return symbol(EQEQ);
          }
        case 144: break;
        case 111: 
          { return symbol(IMPLEMENTS);
          }
        case 145: break;
        case 73: 
          { return symbol(LONG);
          }
        case 146: break;
        case 25: 
          { return symbol(OR);
          }
        case 147: break;
        case 26: 
          { return symbol(PLUS);
          }
        case 148: break;
        case 113: 
          { return symbol(SYNCHRONIZED);
          }
        case 149: break;
        case 59: 
          { string.append('\r');
          }
        case 150: break;
        case 10: 
          { return symbol(RPAREN);
          }
        case 151: break;
        case 83: 
          { return symbol(CONST);
          }
        case 152: break;
        case 44: 
          { return symbol(RSHIFT);
          }
        case 153: break;
        case 84: 
          { return symbol(CLASS);
          }
        case 154: break;
        case 57: 
          { string.append('\t');
          }
        case 155: break;
        case 68: 
          { return symbol(THIS);
          }
        case 156: break;
        case 34: 
          { return symbol(MULTEQ);
          }
        case 157: break;
        case 101: 
          { return symbol(PRIVATE);
          }
        case 158: break;
        case 65: 
          { return symbol(URSHIFT);
          }
        case 159: break;
        case 100: 
          { return symbol(FINALLY);
          }
        case 160: break;
        case 77: 
          { return symbol(URSHIFTEQ);
          }
        case 161: break;
        case 75: 
          { return symbol(GOTO);
          }
        case 162: break;
        case 63: 
          { return symbol(FOR);
          }
        case 163: break;
        case 35: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 164: break;
        case 61: 
          { return symbol(NEW);
          }
        case 165: break;
        case 33: 
          { return symbol(DIVEQ);
          }
        case 166: break;
        case 90: 
          { return symbol(NATIVE);
          }
        case 167: break;
        case 99: 
          { return symbol(DEFAULT);
          }
        case 168: break;
        case 22: 
          { return symbol(QUESTION);
          }
        case 169: break;
        case 2: 
          { return symbol(DIV);
          }
        case 170: break;
        case 95: 
          { return symbol(DOUBLE);
          }
        case 171: break;
        case 72: 
          { return symbol(CHAR);
          }
        case 172: break;
        case 40: 
          { return symbol(IF);
          }
        case 173: break;
        case 4: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 174: break;
        case 102: 
          { return symbol(PACKAGE);
          }
        case 175: break;
        case 54: 
          { return symbol(XOREQ);
          }
        case 176: break;
        case 93: 
          { return symbol(SWITCH);
          }
        case 177: break;
        case 66: 
          { return symbol(LSHIFTEQ);
          }
        case 178: break;
        case 28: 
          { return symbol(MOD);
          }
        case 179: break;
        case 9: 
          { return symbol(LPAREN);
          }
        case 180: break;
        case 67: 
          { return symbol(BOOLEAN_LITERAL, true);
          }
        case 181: break;
        case 46: 
          { return symbol(LSHIFT);
          }
        case 182: break;
        case 79: 
          { return symbol(BREAK);
          }
        case 183: break;
        case 21: 
          { return symbol(COMP);
          }
        case 184: break;
        case 31: 
          { yybegin(YYINITIAL); return symbol(Sym.STRING_LITERAL, string.toString());
          }
        case 185: break;
        case 69: 
          { return symbol(NULL_LITERAL);
          }
        case 186: break;
        case 39: 
          { return symbol(MINUSEQ);
          }
        case 187: break;
        case 36: 
          { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 188: break;
        case 60: 
          { return symbol(TRY);
          }
        case 189: break;
        case 50: 
          { return symbol(OREQ);
          }
        case 190: break;
        case 110: 
          { return symbol(INSTANCEOF);
          }
        case 191: break;
        case 14: 
          { return symbol(RBRACK);
          }
        case 192: break;
        case 15: 
          { return symbol(SEMICOLON);
          }
        case 193: break;
        case 5: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 194: break;
        case 87: 
          { return symbol(FINAL);
          }
        case 195: break;
        case 94: 
          { return symbol(IMPORT);
          }
        case 196: break;
        case 86: 
          { return symbol(FLOAT);
          }
        case 197: break;
        case 81: 
          { return symbol(SUPER);
          }
        case 198: break;
        case 71: 
          { return symbol(CASE);
          }
        case 199: break;
        case 7: 
          { return symbol(MINUS);
          }
        case 200: break;
        case 32: 
          { string.append('\\');
          }
        case 201: break;
        case 6: 
          { return symbol(DOT);
          }
        case 202: break;
        case 64: 
          { return symbol(RSHIFTEQ);
          }
        case 203: break;
        case 62: 
          { return symbol(INT);
          }
        case 204: break;
        case 109: 
          { return symbol(PROTECTED);
          }
        case 205: break;
        case 24: 
          { return symbol(AND);
          }
        case 206: break;
        case 112: 
          { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 207: break;
        case 23: 
          { return symbol(COLON);
          }
        case 208: break;
        case 45: 
          { return symbol(LTEQ);
          }
        case 209: break;
        case 76: 
          { return symbol(VOID);
          }
        case 210: break;
        case 20: 
          { return symbol(NOT);
          }
        case 211: break;
        case 12: 
          { return symbol(RBRACE);
          }
        case 212: break;
        case 3: 
          { return symbol(MULT);
          }
        case 213: break;
        case 1: 
          { /* ignore */
          }
        case 214: break;
        case 13: 
          { return symbol(LBRACK);
          }
        case 215: break;
        case 51: 
          { return symbol(OROR);
          }
        case 216: break;
        case 30: 
          { string.append( yytext() );
          }
        case 217: break;
        case 108: 
          { return symbol(INTERFACE);
          }
        case 218: break;
        case 49: 
          { return symbol(ANDAND);
          }
        case 219: break;
        case 88: 
          { return symbol(WHILE);
          }
        case 220: break;
        case 52: 
          { return symbol(PLUSEQ);
          }
        case 221: break;
        case 74: 
          { return symbol(ELSE);
          }
        case 222: break;
        case 82: 
          { return symbol(CATCH);
          }
        case 223: break;
        case 16: 
          { return symbol(COMMA);
          }
        case 224: break;
        case 85: 
          { return symbol(BOOLEAN_LITERAL, false);
          }
        case 225: break;
        case 91: 
          { return symbol(RETURN);
          }
        case 226: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
