/* The following code was generated by JFlex 1.4.3 on 09/06/15 21:00 */

package scanner;

import java_cup.runtime.*;
import parser.Sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/06/15 21:00 from the specification file
 * <tt>C:/Users/Dinho/ProjetoCompiladores/JavaCompiler/LexerEspecification.lex</tt>
 */
public class Lexer implements Sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\72"+
    "\1\24\1\0\1\6\1\102\1\76\1\25\1\57\1\60\1\5\1\100"+
    "\1\66\1\23\1\21\1\4\1\10\1\16\1\103\1\15\1\104\1\17"+
    "\1\107\1\105\1\106\1\11\1\75\1\65\1\71\1\67\1\70\1\74"+
    "\1\0\3\14\1\110\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\63\1\26\1\64\1\101\1\6\1\0\1\27\1\30\1\34\1\46"+
    "\1\37\1\50\1\53\1\43\1\44\1\6\1\41\1\36\1\51\1\40"+
    "\1\35\1\52\1\6\1\33\1\31\1\32\1\45\1\54\1\55\1\47"+
    "\1\42\1\56\1\61\1\77\1\62\1\73\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6"+
    "\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6"+
    "\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6"+
    "\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0"+
    "\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7"+
    "\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0"+
    "\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6"+
    "\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0"+
    "\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7"+
    "\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7"+
    "\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0"+
    "\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7"+
    "\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7"+
    "\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0"+
    "\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0"+
    "\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6"+
    "\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7"+
    "\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6"+
    "\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0"+
    "\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0"+
    "\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0"+
    "\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0"+
    "\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6"+
    "\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0"+
    "\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0"+
    "\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0"+
    "\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7"+
    "\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7"+
    "\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0"+
    "\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6"+
    "\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7"+
    "\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6"+
    "\25\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"+
    "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"+
    "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
    "\1\7\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0"+
    "\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0"+
    "\12\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6"+
    "\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7"+
    "\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7"+
    "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0"+
    "\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0"+
    "\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6"+
    "\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6"+
    "\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\17\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\40\1\41\2\1\2\42\1\1\1\2\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\3\45\1\50"+
    "\1\46\1\0\1\51\1\52\1\53\1\0\27\5\1\54"+
    "\1\5\1\55\12\5\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\2\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\12\74\1\0\1\107\2\110"+
    "\2\45\1\46\2\0\13\5\1\111\15\5\1\112\2\5"+
    "\1\113\4\5\1\114\11\5\1\115\1\116\1\117\1\75"+
    "\1\0\1\120\1\0\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\110\2\45\1\0\3\5"+
    "\1\132\7\5\1\133\1\5\1\134\1\5\1\135\3\5"+
    "\1\136\1\137\1\140\2\5\1\141\16\5\1\142\1\5"+
    "\1\143\1\110\2\45\1\0\1\5\1\144\4\5\1\145"+
    "\1\146\2\5\1\147\1\5\1\150\1\5\1\151\10\5"+
    "\1\152\1\153\1\154\5\5\1\155\1\110\2\45\1\0"+
    "\2\5\1\156\2\5\1\157\1\5\1\160\1\161\2\5"+
    "\1\162\2\5\1\163\1\5\1\164\5\5\1\165\1\5"+
    "\1\110\2\45\1\0\1\5\1\166\4\5\1\167\3\5"+
    "\1\170\1\171\1\172\1\5\1\173\1\5\1\110\2\45"+
    "\1\0\1\174\1\175\2\5\1\176\4\5\1\177\1\110"+
    "\2\45\1\0\1\5\1\200\1\5\1\201\1\5\1\202"+
    "\1\110\2\45\1\0\1\5\1\203\1\204\1\0\2\45"+
    "\1\205\1\5\1\0\2\45\1\206\1\0\2\45\1\0"+
    "\2\45\1\0\2\45\1\0\2\45\1\0\1\45\1\46"+
    "\1\0\5\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\333\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\333\0\333\0\u036c"+
    "\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4"+
    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\333\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\u07b3\0\u07fc"+
    "\0\u0845\0\u088e\0\333\0\333\0\333\0\u08d7\0\u0920\0\u0969"+
    "\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\333\0\333\0\u0ad6\0\u0b1f"+
    "\0\u0b68\0\333\0\u0bb1\0\u0bfa\0\u0c43\0\333\0\333\0\u0c8c"+
    "\0\u0cd5\0\333\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\333\0\u0e42"+
    "\0\u0e8b\0\333\0\333\0\333\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7"+
    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f"+
    "\0\u1488\0\u14d1\0\u151a\0\u1563\0\u01ff\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\333\0\333\0\u1918\0\333\0\u1961\0\333\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\u19aa\0\u19f3\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\333\0\333\0\333\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60"+
    "\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\333\0\u1d5f"+
    "\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7"+
    "\0\u1ff0\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef"+
    "\0\u2238\0\u01ff\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u01ff"+
    "\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u01ff"+
    "\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34"+
    "\0\u2a7d\0\333\0\u2ac6\0\333\0\333\0\u1a85\0\333\0\u2b0f"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\333\0\333"+
    "\0\333\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e"+
    "\0\u01ff\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d"+
    "\0\u01ff\0\u2f56\0\u01ff\0\u2f9f\0\u01ff\0\u2fe8\0\u3031\0\u307a"+
    "\0\u01ff\0\u01ff\0\u01ff\0\u30c3\0\u310c\0\u01ff\0\u3155\0\u319e"+
    "\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6"+
    "\0\u342f\0\u3478\0\u34c1\0\u350a\0\u01ff\0\u3553\0\333\0\u359c"+
    "\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u01ff\0\u3709\0\u3752\0\u379b"+
    "\0\u37e4\0\u01ff\0\u01ff\0\u382d\0\u3876\0\u38bf\0\u3908\0\u01ff"+
    "\0\u3951\0\u01ff\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07"+
    "\0\u3b50\0\u3b99\0\u01ff\0\u01ff\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd"+
    "\0\u3d06\0\u3d4f\0\u01ff\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc"+
    "\0\u3f05\0\u01ff\0\u3f4e\0\u3f97\0\u01ff\0\u3fe0\0\u01ff\0\u01ff"+
    "\0\u4029\0\u4072\0\u01ff\0\u40bb\0\u4104\0\u01ff\0\u414d\0\u01ff"+
    "\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba\0\u01ff\0\u4303\0\u434c"+
    "\0\u4395\0\u43de\0\u4427\0\u4470\0\u01ff\0\u44b9\0\u4502\0\u454b"+
    "\0\u4594\0\u01ff\0\u45dd\0\u4626\0\u466f\0\u01ff\0\u01ff\0\u01ff"+
    "\0\u46b8\0\u01ff\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u01ff"+
    "\0\u01ff\0\u486e\0\u48b7\0\u01ff\0\u4900\0\u4949\0\u4992\0\u49db"+
    "\0\u01ff\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48\0\u01ff\0\u4b91"+
    "\0\u01ff\0\u4bda\0\u01ff\0\u4c23\0\u4c6c\0\u4cb5\0\u4cfe\0\u4d47"+
    "\0\u01ff\0\u01ff\0\u4d90\0\u4dd9\0\u4e22\0\333\0\u4e6b\0\u4eb4"+
    "\0\u4efd\0\u4f46\0\u01ff\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3"+
    "\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269\0\u52b2\0\u52fb"+
    "\0\u5344\0\u5344\0\u538d\0\u53d6\0\u541f\0\u5468\0\u54b1\0\u54fa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\11\1\26\1\27\1\30\3\11\1\31\1\11\1\32"+
    "\1\11\1\33\1\11\1\34\1\11\1\35\1\36\1\11"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\5\13\1\11\1\63\1\64"+
    "\1\65\21\63\1\66\1\63\1\67\62\63\1\70\1\71"+
    "\1\72\22\70\1\4\1\73\62\70\113\0\1\6\112\0"+
    "\1\74\1\75\61\0\1\76\110\0\1\77\27\0\13\11"+
    "\1\0\1\11\4\0\30\11\24\0\6\11\10\0\1\100"+
    "\1\101\1\102\1\103\1\0\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\13\0\1\102\1\111\6\0\1\112\1\103"+
    "\1\107\32\0\1\104\2\106\1\101\1\106\1\112\10\0"+
    "\2\13\1\102\2\0\3\13\1\107\1\110\1\111\13\0"+
    "\1\102\1\111\6\0\1\112\1\0\1\107\32\0\5\13"+
    "\1\112\10\0\2\110\3\0\3\110\63\0\5\110\24\0"+
    "\1\113\43\0\1\114\13\0\1\115\13\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\116\26\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\117\1\11\1\120"+
    "\4\11\1\121\14\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\122\7\11\1\123\1\124\1\11"+
    "\1\125\7\11\1\126\1\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\127\7\11\1\130\13\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\131\17\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\132\5\11\1\133\1\134\4\11\1\135\13\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\136\21\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\137\10\11\1\140\7\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\141\7\11\1\142"+
    "\5\11\1\143\11\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\11\11\1\144\7\11\1\145\1\146\5\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\147\1\11\1\150\17\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\151\5\11\1\152\1\153\5\11"+
    "\1\154\12\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\155\3\11\1\156\11\11\1\157\11\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\6\11\1\160"+
    "\21\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\161\13\11\24\0\6\11\67\0\1\162\110\0"+
    "\1\163\1\164\107\0\1\165\1\0\1\166\106\0\1\167"+
    "\110\0\1\170\6\0\1\171\101\0\1\172\7\0\1\173"+
    "\100\0\1\174\10\0\1\175\77\0\1\176\110\0\1\177"+
    "\21\0\1\63\2\0\21\63\1\0\1\63\1\0\62\63"+
    "\2\0\1\65\106\0\2\200\1\0\5\200\1\201\4\200"+
    "\2\201\1\202\4\200\1\203\1\204\1\205\1\200\1\206"+
    "\1\200\1\207\1\210\4\200\1\211\7\200\1\212\32\200"+
    "\1\201\2\202\1\200\1\202\1\200\25\0\1\213\65\0"+
    "\1\72\106\0\2\200\1\0\5\200\1\214\4\200\2\214"+
    "\1\215\4\200\1\216\1\217\1\220\1\200\1\221\1\200"+
    "\1\222\1\223\4\200\1\224\7\200\1\225\32\200\1\214"+
    "\2\215\1\200\1\215\1\200\1\74\1\5\1\6\106\74"+
    "\5\75\1\226\103\75\10\0\1\100\1\101\1\227\2\0"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\13\0\1\227"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\1\104\2\106"+
    "\1\101\1\106\1\112\10\0\2\101\3\0\3\101\1\107"+
    "\1\110\1\111\14\0\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\5\101\1\112\10\0\1\230\1\231\2\0\5\231"+
    "\1\0\1\231\4\0\2\231\3\0\1\231\2\0\1\231"+
    "\6\0\1\231\1\0\1\231\32\0\6\231\10\0\1\232"+
    "\1\101\1\227\2\0\3\232\1\107\1\110\1\111\13\0"+
    "\1\227\1\111\6\0\1\112\1\0\1\107\32\0\3\232"+
    "\1\101\1\232\1\112\10\0\1\106\1\101\1\227\2\0"+
    "\3\106\1\107\1\110\1\111\13\0\1\227\1\111\6\0"+
    "\1\112\1\0\1\107\32\0\3\106\1\101\1\106\1\112"+
    "\10\0\1\233\1\101\1\227\2\0\3\233\1\107\1\110"+
    "\1\111\13\0\1\227\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\3\233\1\101\1\233\1\112\10\0\2\110\3\0"+
    "\3\110\1\107\1\0\1\111\14\0\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\5\110\1\112\10\0\2\234\3\0"+
    "\3\234\3\0\1\235\54\0\1\235\2\0\5\234\17\0"+
    "\1\236\100\0\13\11\1\0\1\11\4\0\2\11\1\237"+
    "\25\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\240\17\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\241\21\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\242\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\243\3\11"+
    "\1\244\23\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\245\16\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\246\21\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\23\11\1\247\4\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\250\12\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\251\12\11\1\252\2\11\1\253\11\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\4\11\1\254"+
    "\10\11\1\255\12\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\256\24\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\257\1\260\24\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\261\16\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\262\27\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\263\27\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\264\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\265\25\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\266\24\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\267\24\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\26\11\1\270\1\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\271\20\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\272\1\273\24\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\23\11\1\274\4\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\275\11\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\21\11\1\276"+
    "\6\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\277\20\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\4\11\1\300\23\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\301\21\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\11\11\1\302"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\303\22\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\304\6\11\1\305\12\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\306"+
    "\26\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\307\5\11\1\310\12\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\311\12\11\24\0"+
    "\6\11\67\0\1\312\1\313\107\0\1\314\31\0\1\202"+
    "\4\0\3\202\63\0\3\202\1\0\1\202\11\0\1\315"+
    "\4\0\3\315\63\0\3\315\1\0\1\315\11\0\1\316"+
    "\4\0\3\316\5\0\1\317\55\0\3\316\1\0\1\316"+
    "\11\0\1\320\4\0\3\320\5\0\1\317\55\0\3\320"+
    "\1\0\1\320\26\0\1\321\110\0\1\322\110\0\1\323"+
    "\110\0\1\324\110\0\1\325\110\0\1\326\110\0\1\327"+
    "\110\0\1\330\63\0\4\75\1\6\1\226\103\75\10\0"+
    "\1\230\1\231\1\331\1\0\5\231\1\0\1\231\4\0"+
    "\2\231\3\0\1\231\1\0\1\331\1\231\6\0\1\231"+
    "\1\0\1\231\32\0\6\231\10\0\2\332\1\331\1\0"+
    "\5\332\1\0\1\332\4\0\2\332\3\0\1\332\1\0"+
    "\1\331\1\332\6\0\1\332\1\0\1\332\32\0\6\332"+
    "\10\0\1\333\1\101\1\227\2\0\3\333\1\107\1\110"+
    "\1\111\13\0\1\227\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\3\333\1\101\1\333\1\112\10\0\1\334\1\101"+
    "\1\227\2\0\3\334\1\107\1\110\1\111\13\0\1\227"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\3\334\1\101"+
    "\1\334\1\112\10\0\2\234\3\0\3\234\1\107\25\0"+
    "\1\112\1\0\1\107\32\0\5\234\1\112\10\0\2\234"+
    "\3\0\3\234\63\0\5\234\105\0\1\335\12\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\336\24\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\337\27\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\7\11\1\340"+
    "\20\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\341\17\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\342\24\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\343\12\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\5\11\1\344"+
    "\22\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\345\23\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\346\17\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\347\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\11\11\1\350"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\351\17\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\352\21\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\353\25\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\16\11\1\354"+
    "\11\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\355\17\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\356\22\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\357\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\2\11\1\360"+
    "\25\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\361\23\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\24\11\1\362\3\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\363\17\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\10\11\1\364"+
    "\17\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\365\12\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\366\20\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\367\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\10\11\1\370"+
    "\17\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\371\1\372\20\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\373\26\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\374\27\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\2\11\1\375"+
    "\25\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\376\27\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\377\27\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\12\11\1\u0100\15\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u0101\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\25\11\1\u0102"+
    "\2\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u0103\20\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u0104\27\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\17\11\1\u0105\10\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\u0106\20\11"+
    "\24\0\6\11\67\0\1\u0107\46\0\1\317\73\0\2\u0108"+
    "\1\331\1\0\5\u0108\1\0\1\u0108\4\0\2\u0108\3\0"+
    "\1\u0108\1\0\1\331\1\u0108\6\0\1\u0108\1\0\1\u0108"+
    "\32\0\6\u0108\10\0\1\u0109\1\101\1\227\2\0\3\u0109"+
    "\1\107\1\110\1\111\13\0\1\227\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\3\u0109\1\101\1\u0109\1\112\10\0"+
    "\1\u010a\1\101\1\227\2\0\3\u010a\1\107\1\110\1\111"+
    "\13\0\1\227\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\3\u010a\1\101\1\u010a\1\112\105\0\1\u010b\11\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u010c\23\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\u010d\15\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u010e\17\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u010f\12\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\u0110\22\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\u0111\13\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u0112\24\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u0113\23\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\u0114\22\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\u0115\25\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\26\11"+
    "\1\u0116\1\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\u0117\23\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\14\11\1\u0118\13\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u0119\12\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u011a\25\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u011b\16\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\25\11\1\u011c\2\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\u011d\27\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u011e"+
    "\23\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\u011f\23\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0120\17\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u0121\20\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\16\11\1\u0122"+
    "\11\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0123\17\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0124\24\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\u0125\20\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\u0126\27\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0127\17\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0128\27\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0129\12\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u012a\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u012b"+
    "\17\11\24\0\6\11\10\0\2\u012c\1\331\1\0\5\u012c"+
    "\1\0\1\u012c\4\0\2\u012c\3\0\1\u012c\1\0\1\331"+
    "\1\u012c\6\0\1\u012c\1\0\1\u012c\32\0\6\u012c\10\0"+
    "\1\u012d\1\101\1\227\2\0\3\u012d\1\107\1\110\1\111"+
    "\13\0\1\227\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\3\u012d\1\101\1\u012d\1\112\10\0\1\u012e\1\101\1\227"+
    "\2\0\3\u012e\1\107\1\110\1\111\13\0\1\227\1\111"+
    "\6\0\1\112\1\0\1\107\32\0\3\u012e\1\101\1\u012e"+
    "\1\112\104\0\1\u012f\12\0\13\11\1\0\1\11\4\0"+
    "\1\u0130\27\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\u0131\27\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0132\22\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u0133\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\4\11\1\u0134"+
    "\23\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\u0135\13\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0136\12\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u0137\25\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u0138"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0139\16\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\u013a\10\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u013b\17\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\11\11\1\u013c"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\21\11\1\u013d\6\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u013e\24\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\22\11\1\u013f\5\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0140"+
    "\17\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\u0141\20\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u0142\20\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\24\11\1\u0143\3\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\5\11\1\u0144"+
    "\22\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0145\24\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\u0146\22\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u0147\12\11\24\0"+
    "\6\11\10\0\2\u0148\1\331\1\0\5\u0148\1\0\1\u0148"+
    "\4\0\2\u0148\3\0\1\u0148\1\0\1\331\1\u0148\6\0"+
    "\1\u0148\1\0\1\u0148\32\0\6\u0148\10\0\1\u0149\1\101"+
    "\1\227\2\0\3\u0149\1\107\1\110\1\111\13\0\1\227"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\3\u0149\1\101"+
    "\1\u0149\1\112\10\0\1\u014a\1\101\1\227\2\0\3\u014a"+
    "\1\107\1\110\1\111\13\0\1\227\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\3\u014a\1\101\1\u014a\1\112\106\0"+
    "\1\u014b\10\0\13\11\1\0\1\11\4\0\5\11\1\u014c"+
    "\22\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u014d\16\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\21\11\1\u014e\6\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\u014f\21\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0150"+
    "\17\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\16\11\1\u0151\11\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\u0152\25\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u0153\22\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\u0154\27\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0155\17\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0156\24\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\13\11\1\u0157\14\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0158\17\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u0159\24\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u015a\17\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\u015b\20\11\24\0\6\11"+
    "\10\0\2\u015c\1\331\1\0\5\u015c\1\0\1\u015c\4\0"+
    "\2\u015c\3\0\1\u015c\1\0\1\331\1\u015c\6\0\1\u015c"+
    "\1\0\1\u015c\32\0\6\u015c\10\0\1\u015d\1\101\1\227"+
    "\2\0\3\u015d\1\107\1\110\1\111\13\0\1\227\1\111"+
    "\6\0\1\112\1\0\1\107\32\0\3\u015d\1\101\1\u015d"+
    "\1\112\10\0\1\u015e\1\101\1\227\2\0\3\u015e\1\107"+
    "\1\110\1\111\13\0\1\227\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\3\u015e\1\101\1\u015e\1\112\15\0\1\u015f"+
    "\101\0\13\11\1\0\1\11\4\0\3\11\1\u0160\24\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\u0161\4\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u0162\16\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u0163\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0164\17\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0165\17\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\u0166\22\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u0167\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0168\17\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0169\17\11\24\0\6\11\10\0\2\u016a\1\331\1\0"+
    "\5\u016a\1\0\1\u016a\4\0\2\u016a\3\0\1\u016a\1\0"+
    "\1\331\1\u016a\6\0\1\u016a\1\0\1\u016a\32\0\6\u016a"+
    "\10\0\1\u016b\1\101\1\227\2\0\3\u016b\1\107\1\110"+
    "\1\111\13\0\1\227\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\3\u016b\1\101\1\u016b\1\112\10\0\1\u016c\1\101"+
    "\1\227\2\0\3\u016c\1\107\1\110\1\111\13\0\1\227"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\3\u016c\1\101"+
    "\1\u016c\1\112\107\0\1\u016d\7\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u016e\12\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\u016f\24\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\u0170\21\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0171\17\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0172\24\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\17\11\1\u0173\10\11\24\0\6\11"+
    "\10\0\2\u0174\1\331\1\0\5\u0174\1\0\1\u0174\4\0"+
    "\2\u0174\3\0\1\u0174\1\0\1\331\1\u0174\6\0\1\u0174"+
    "\1\0\1\u0174\32\0\6\u0174\10\0\1\u0175\1\101\1\227"+
    "\2\0\3\u0175\1\107\1\110\1\111\13\0\1\227\1\111"+
    "\6\0\1\112\1\0\1\107\32\0\3\u0175\1\101\1\u0175"+
    "\1\112\10\0\1\u0176\1\101\1\227\2\0\3\u0176\1\107"+
    "\1\110\1\111\13\0\1\227\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\3\u0176\1\101\1\u0176\1\112\104\0\1\u0177"+
    "\12\0\13\11\1\0\1\11\4\0\27\11\1\u0178\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\21\11\1\u0179"+
    "\6\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\u017a\25\11\24\0\6\11\10\0\2\u017b\1\331"+
    "\1\0\5\u017b\1\0\1\u017b\4\0\2\u017b\3\0\1\u017b"+
    "\1\0\1\331\1\u017b\6\0\1\u017b\1\0\1\u017b\32\0"+
    "\6\u017b\10\0\1\u017c\1\101\1\227\2\0\3\u017c\1\107"+
    "\1\110\1\111\13\0\1\227\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\3\u017c\1\101\1\u017c\1\112\10\0\1\u017d"+
    "\1\101\1\227\2\0\3\u017d\1\107\1\110\1\111\13\0"+
    "\1\227\1\111\6\0\1\112\1\0\1\107\32\0\3\u017d"+
    "\1\101\1\u017d\1\112\106\0\1\u017e\10\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u017f\17\11\24\0\6\11\10\0"+
    "\2\u0180\1\331\1\0\5\u0180\1\0\1\u0180\4\0\2\u0180"+
    "\3\0\1\u0180\1\0\1\331\1\u0180\6\0\1\u0180\1\0"+
    "\1\u0180\32\0\6\u0180\10\0\1\u0181\1\101\1\227\2\0"+
    "\3\u0181\1\107\1\110\1\111\13\0\1\227\1\111\6\0"+
    "\1\112\1\0\1\107\32\0\3\u0181\1\101\1\u0181\1\112"+
    "\10\0\1\u0182\1\101\1\227\2\0\3\u0182\1\107\1\110"+
    "\1\111\13\0\1\227\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\3\u0182\1\101\1\u0182\1\112\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\u0183\10\11\24\0\6\11\10\0"+
    "\2\u0184\1\331\1\0\5\u0184\1\0\1\u0184\4\0\2\u0184"+
    "\3\0\1\u0184\1\0\1\331\1\u0184\6\0\1\u0184\1\0"+
    "\1\u0184\32\0\6\u0184\10\0\1\u0185\1\101\1\227\2\0"+
    "\3\u0185\1\107\1\110\1\111\13\0\1\227\1\111\6\0"+
    "\1\112\1\0\1\107\32\0\3\u0185\1\101\1\u0185\1\112"+
    "\10\0\1\u0186\1\101\1\227\2\0\3\u0186\1\107\1\110"+
    "\1\111\13\0\1\227\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\3\u0186\1\101\1\u0186\1\112\10\0\2\u0187\1\331"+
    "\1\0\5\u0187\1\0\1\u0187\4\0\2\u0187\3\0\1\u0187"+
    "\1\0\1\331\1\u0187\6\0\1\u0187\1\0\1\u0187\32\0"+
    "\6\u0187\10\0\1\u0188\1\101\1\227\2\0\3\u0188\1\107"+
    "\1\110\1\111\13\0\1\227\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\3\u0188\1\101\1\u0188\1\112\10\0\1\u0189"+
    "\1\101\1\227\2\0\3\u0189\1\107\1\110\1\111\13\0"+
    "\1\227\1\111\6\0\1\112\1\0\1\107\32\0\3\u0189"+
    "\1\101\1\u0189\1\112\10\0\2\u018a\1\331\1\0\5\u018a"+
    "\1\0\1\u018a\4\0\2\u018a\3\0\1\u018a\1\0\1\331"+
    "\1\u018a\6\0\1\u018a\1\0\1\u018a\32\0\6\u018a\10\0"+
    "\1\u018b\1\101\1\227\2\0\3\u018b\1\107\1\110\1\111"+
    "\13\0\1\227\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\3\u018b\1\101\1\u018b\1\112\10\0\1\u018c\1\101\1\227"+
    "\2\0\3\u018c\1\107\1\110\1\111\13\0\1\227\1\111"+
    "\6\0\1\112\1\0\1\107\32\0\3\u018c\1\101\1\u018c"+
    "\1\112\10\0\2\u018d\1\331\1\0\5\u018d\1\0\1\u018d"+
    "\4\0\2\u018d\3\0\1\u018d\1\0\1\331\1\u018d\6\0"+
    "\1\u018d\1\0\1\u018d\32\0\6\u018d\10\0\1\u018e\1\101"+
    "\1\227\2\0\3\u018e\1\107\1\110\1\111\13\0\1\227"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\3\u018e\1\101"+
    "\1\u018e\1\112\10\0\1\u018f\1\101\1\227\2\0\3\u018f"+
    "\1\107\1\110\1\111\13\0\1\227\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\3\u018f\1\101\1\u018f\1\112\10\0"+
    "\2\u0190\1\331\1\0\5\u0190\1\0\1\u0190\4\0\2\u0190"+
    "\3\0\1\u0190\1\0\1\331\1\u0190\6\0\1\u0190\1\0"+
    "\1\u0190\32\0\6\u0190\10\0\1\u0191\1\101\1\227\2\0"+
    "\3\u0191\1\107\1\110\1\111\13\0\1\227\1\111\6\0"+
    "\1\112\1\0\1\107\32\0\3\u0191\1\101\1\u0191\1\112"+
    "\10\0\1\u0192\1\101\1\227\2\0\3\u0192\1\107\1\110"+
    "\1\111\13\0\1\227\1\111\6\0\1\112\1\0\1\107"+
    "\32\0\3\u0192\1\101\1\u0192\1\112\10\0\2\u0193\1\331"+
    "\1\0\5\u0193\1\0\1\u0193\4\0\2\u0193\3\0\1\u0193"+
    "\1\0\1\331\1\u0193\6\0\1\u0193\1\0\1\u0193\32\0"+
    "\6\u0193\10\0\1\u0194\1\101\1\227\2\0\3\u0194\1\107"+
    "\1\110\1\111\13\0\1\227\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\3\u0194\1\101\1\u0194\1\112\12\0\1\331"+
    "\23\0\1\331\62\0\1\u0195\1\101\1\227\2\0\3\u0195"+
    "\1\107\1\110\1\111\13\0\1\227\1\111\6\0\1\112"+
    "\1\0\1\107\32\0\3\u0195\1\101\1\u0195\1\112\10\0"+
    "\1\u0196\1\101\1\227\2\0\3\u0196\1\107\1\110\1\111"+
    "\13\0\1\227\1\111\6\0\1\112\1\0\1\107\32\0"+
    "\3\u0196\1\101\1\u0196\1\112\10\0\1\u0197\1\101\1\227"+
    "\2\0\3\u0197\1\107\1\110\1\111\13\0\1\227\1\111"+
    "\6\0\1\112\1\0\1\107\32\0\3\u0197\1\101\1\u0197"+
    "\1\112\10\0\1\u0198\1\101\1\227\2\0\3\u0198\1\107"+
    "\1\110\1\111\13\0\1\227\1\111\6\0\1\112\1\0"+
    "\1\107\32\0\3\u0198\1\101\1\u0198\1\112\10\0\2\101"+
    "\1\227\2\0\3\101\1\107\1\110\1\111\13\0\1\227"+
    "\1\111\6\0\1\112\1\0\1\107\32\0\5\101\1\112";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21827];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\17\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\11\2\1\1\0"+
    "\2\11\2\1\1\11\1\0\3\1\1\11\1\1\1\0"+
    "\3\11\1\0\44\1\2\11\1\1\1\11\1\1\12\11"+
    "\2\1\11\11\12\1\1\0\1\11\5\1\2\0\53\1"+
    "\1\11\1\1\2\11\1\0\1\11\1\0\11\11\3\1"+
    "\1\0\51\1\1\11\3\1\1\0\43\1\1\0\33\1"+
    "\1\0\23\1\1\0\15\1\1\0\11\1\1\0\3\1"+
    "\1\0\2\1\1\11\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2284) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return symbol(GTEQ);
          }
        case 135: break;
        case 29: 
          { return symbol(XOR);
          }
        case 136: break;
        case 20: 
          { return symbol(GT);
          }
        case 137: break;
        case 128: 
          { return symbol(TRANSIENT);
          }
        case 138: break;
        case 125: 
          { return symbol(STRICTFP);
          }
        case 139: break;
        case 51: 
          { return symbol(NOTEQ);
          }
        case 140: break;
        case 84: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
          }
        case 141: break;
        case 90: 
          { return symbol(BYTE);
          }
        case 142: break;
        case 9: 
          { yybegin(STRING); string.setLength(0);
          }
        case 143: break;
        case 13: 
          { return symbol(LBRACE);
          }
        case 144: break;
        case 19: 
          { return symbol(EQ);
          }
        case 145: break;
        case 42: 
          { return symbol(MINUSMINUS);
          }
        case 146: break;
        case 126: 
          { return symbol(CONTINUE);
          }
        case 147: break;
        case 41: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 148: break;
        case 110: 
          { return symbol(STATIC);
          }
        case 149: break;
        case 45: 
          { return symbol(DO);
          }
        case 150: break;
        case 57: 
          { return symbol(PLUSPLUS);
          }
        case 151: break;
        case 127: 
          { return symbol(VOLATILE);
          }
        case 152: break;
        case 88: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
          }
        case 153: break;
        case 21: 
          { return symbol(LT);
          }
        case 154: break;
        case 119: 
          { return symbol(EXTENDS);
          }
        case 155: break;
        case 112: 
          { return symbol(THROWS);
          }
        case 156: break;
        case 52: 
          { return symbol(ANDEQ);
          }
        case 157: break;
        case 61: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
          }
        case 158: break;
        case 66: 
          { string.append( '\t' );
          }
        case 159: break;
        case 117: 
          { return symbol(PUBLIC);
          }
        case 160: break;
        case 59: 
          { return symbol(MODEQ);
          }
        case 161: break;
        case 124: 
          { return symbol(ABSTRACT);
          }
        case 162: break;
        case 118: 
          { return symbol(BOOLEAN);
          }
        case 163: break;
        case 101: 
          { return symbol(SHORT);
          }
        case 164: break;
        case 103: 
          { return symbol(THROW);
          }
        case 165: break;
        case 10: 
          { yybegin(CHARLITERAL);
          }
        case 166: break;
        case 46: 
          { return symbol(EQEQ);
          }
        case 167: break;
        case 132: 
          { return symbol(IMPLEMENTS);
          }
        case 168: break;
        case 40: 
          { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 169: break;
        case 95: 
          { return symbol(LONG);
          }
        case 170: break;
        case 27: 
          { return symbol(OR);
          }
        case 171: break;
        case 28: 
          { return symbol(PLUS);
          }
        case 172: break;
        case 134: 
          { return symbol(SYNCHRONIZED);
          }
        case 173: break;
        case 68: 
          { string.append( '\n' );
          }
        case 174: break;
        case 12: 
          { return symbol(RPAREN);
          }
        case 175: break;
        case 48: 
          { return symbol(RSHIFT);
          }
        case 176: break;
        case 105: 
          { return symbol(CLASS);
          }
        case 177: break;
        case 92: 
          { return symbol(THIS);
          }
        case 178: break;
        case 87: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
          }
        case 179: break;
        case 70: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
          }
        case 180: break;
        case 36: 
          { return symbol(MULTEQ);
          }
        case 181: break;
        case 81: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
          }
        case 182: break;
        case 123: 
          { return symbol(PRIVATE);
          }
        case 183: break;
        case 78: 
          { return symbol(URSHIFT);
          }
        case 184: break;
        case 121: 
          { return symbol(FINALLY);
          }
        case 185: break;
        case 99: 
          { return symbol(URSHIFTEQ);
          }
        case 186: break;
        case 72: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
          }
        case 187: break;
        case 76: 
          { return symbol(FOR);
          }
        case 188: break;
        case 89: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
          }
        case 189: break;
        case 1: 
          { throw new RuntimeException("Erro - Caractere ilegal \""+yytext()+ "\" na linha "+yyline+", coluna "+yycolumn);
          }
        case 190: break;
        case 38: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 191: break;
        case 86: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
          }
        case 192: break;
        case 74: 
          { return symbol(NEW);
          }
        case 193: break;
        case 35: 
          { return symbol(DIVEQ);
          }
        case 194: break;
        case 114: 
          { return symbol(NATIVE);
          }
        case 195: break;
        case 82: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
          }
        case 196: break;
        case 120: 
          { return symbol(DEFAULT);
          }
        case 197: break;
        case 24: 
          { return symbol(QUESTION);
          }
        case 198: break;
        case 3: 
          { return symbol(DIV);
          }
        case 199: break;
        case 116: 
          { return symbol(DOUBLE);
          }
        case 200: break;
        case 94: 
          { return symbol(CHAR);
          }
        case 201: break;
        case 44: 
          { return symbol(IF);
          }
        case 202: break;
        case 85: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
          }
        case 203: break;
        case 5: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 204: break;
        case 60: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 205: break;
        case 122: 
          { return symbol(PACKAGE);
          }
        case 206: break;
        case 58: 
          { return symbol(XOREQ);
          }
        case 207: break;
        case 111: 
          { return symbol(SWITCH);
          }
        case 208: break;
        case 79: 
          { return symbol(LSHIFTEQ);
          }
        case 209: break;
        case 30: 
          { return symbol(MOD);
          }
        case 210: break;
        case 11: 
          { return symbol(LPAREN);
          }
        case 211: break;
        case 67: 
          { string.append( '\r' );
          }
        case 212: break;
        case 91: 
          { return symbol(BOOLEAN_LITERAL, true);
          }
        case 213: break;
        case 50: 
          { return symbol(LSHIFT);
          }
        case 214: break;
        case 100: 
          { return symbol(BREAK);
          }
        case 215: break;
        case 97: 
          { return symbol(NULL_LITERAL);
          }
        case 216: break;
        case 23: 
          { return symbol(COMP);
          }
        case 217: break;
        case 33: 
          { yybegin(YYINITIAL); return symbol(Sym.STRING_LITERAL, string.toString());
          }
        case 218: break;
        case 65: 
          { string.append( '\b' );
          }
        case 219: break;
        case 43: 
          { return symbol(MINUSEQ);
          }
        case 220: break;
        case 39: 
          { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 221: break;
        case 32: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 222: break;
        case 73: 
          { return symbol(TRY);
          }
        case 223: break;
        case 62: 
          { string.append( '\"' );
          }
        case 224: break;
        case 54: 
          { return symbol(OREQ);
          }
        case 225: break;
        case 131: 
          { return symbol(INSTANCEOF);
          }
        case 226: break;
        case 37: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
          }
        case 227: break;
        case 16: 
          { return symbol(RBRACK);
          }
        case 228: break;
        case 17: 
          { return symbol(SEMICOLON);
          }
        case 229: break;
        case 6: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 230: break;
        case 108: 
          { return symbol(FINAL);
          }
        case 231: break;
        case 115: 
          { return symbol(IMPORT);
          }
        case 232: break;
        case 63: 
          { string.append( '\'' );
          }
        case 233: break;
        case 107: 
          { return symbol(FLOAT);
          }
        case 234: break;
        case 102: 
          { return symbol(SUPER);
          }
        case 235: break;
        case 64: 
          { string.append( '\\' );
          }
        case 236: break;
        case 93: 
          { return symbol(CASE);
          }
        case 237: break;
        case 8: 
          { return symbol(MINUS);
          }
        case 238: break;
        case 7: 
          { return symbol(DOT);
          }
        case 239: break;
        case 77: 
          { return symbol(RSHIFTEQ);
          }
        case 240: break;
        case 75: 
          { return symbol(INT);
          }
        case 241: break;
        case 130: 
          { return symbol(PROTECTED);
          }
        case 242: break;
        case 26: 
          { return symbol(AND);
          }
        case 243: break;
        case 133: 
          { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 244: break;
        case 25: 
          { return symbol(COLON);
          }
        case 245: break;
        case 49: 
          { return symbol(LTEQ);
          }
        case 246: break;
        case 69: 
          { string.append( '\f' );
          }
        case 247: break;
        case 98: 
          { return symbol(VOID);
          }
        case 248: break;
        case 22: 
          { return symbol(NOT);
          }
        case 249: break;
        case 14: 
          { return symbol(RBRACE);
          }
        case 250: break;
        case 71: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
          }
        case 251: break;
        case 4: 
          { return symbol(MULT);
          }
        case 252: break;
        case 2: 
          { /* ignore */
          }
        case 253: break;
        case 80: 
          { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, (char)val);
          }
        case 254: break;
        case 15: 
          { return symbol(LBRACK);
          }
        case 255: break;
        case 55: 
          { return symbol(OROR);
          }
        case 256: break;
        case 83: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
          }
        case 257: break;
        case 31: 
          { string.append( yytext() );
          }
        case 258: break;
        case 129: 
          { return symbol(INTERFACE);
          }
        case 259: break;
        case 53: 
          { return symbol(ANDAND);
          }
        case 260: break;
        case 109: 
          { return symbol(WHILE);
          }
        case 261: break;
        case 34: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 262: break;
        case 56: 
          { return symbol(PLUSEQ);
          }
        case 263: break;
        case 96: 
          { return symbol(ELSE);
          }
        case 264: break;
        case 104: 
          { return symbol(CATCH);
          }
        case 265: break;
        case 18: 
          { return symbol(COMMA);
          }
        case 266: break;
        case 106: 
          { return symbol(BOOLEAN_LITERAL, false);
          }
        case 267: break;
        case 113: 
          { return symbol(RETURN);
          }
        case 268: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
