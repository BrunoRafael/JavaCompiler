/* The following code was generated by JFlex 1.4.3 on 04/11/15 00:28 */

package scanner;

import java.io.IOException;
import java_cup.runtime.*;
import parser.Sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04/11/15 00:28 from the specification file
 * <tt>C:/Users/Dinho/JavaCompiler/LexerEspecification.lex</tt>
 */
public class Lexer implements Sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\71\1\23"+
    "\2\0\1\101\1\75\1\24\1\56\1\57\1\5\1\77\1\65\1\22"+
    "\1\20\1\4\1\10\1\15\1\102\1\14\1\103\1\16\1\106\1\104"+
    "\1\105\1\7\1\74\1\64\1\70\1\66\1\67\1\73\1\0\3\13"+
    "\1\107\1\21\1\17\5\6\1\11\13\6\1\12\2\6\1\62\1\25"+
    "\1\63\1\100\1\6\1\0\1\26\1\27\1\33\1\45\1\36\1\47"+
    "\1\52\1\42\1\43\1\6\1\40\1\35\1\50\1\37\1\34\1\51"+
    "\1\6\1\32\1\30\1\31\1\44\1\53\1\54\1\46\1\41\1\55"+
    "\1\60\1\76\1\61\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\17\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\40\1\41\2\1\2\42\1\1\1\2\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\50\1\47"+
    "\1\51\1\0\3\51\1\52\1\53\1\0\27\5\1\54"+
    "\1\5\1\55\12\5\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\2\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\12\74\1\0\1\47\1\0"+
    "\1\107\2\110\2\51\1\0\12\5\1\111\15\5\1\112"+
    "\2\5\1\113\4\5\1\114\10\5\1\115\1\116\1\117"+
    "\1\75\1\0\1\120\1\0\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\110\1\131\2\51\1\0"+
    "\3\5\1\132\6\5\1\133\1\5\1\134\1\5\1\135"+
    "\3\5\1\136\1\137\1\140\2\5\1\141\15\5\1\142"+
    "\1\5\1\143\1\110\2\51\1\0\1\5\1\144\3\5"+
    "\1\145\1\146\2\5\1\147\1\5\1\150\1\5\1\151"+
    "\10\5\1\152\1\153\1\154\4\5\1\155\1\110\2\51"+
    "\1\0\2\5\1\156\1\5\1\157\1\5\1\160\1\161"+
    "\2\5\1\162\2\5\1\163\1\5\1\164\5\5\1\165"+
    "\1\110\2\51\1\0\1\5\1\166\3\5\1\167\3\5"+
    "\1\170\1\171\1\172\1\5\1\173\1\110\2\51\1\0"+
    "\1\174\2\5\1\175\4\5\1\110\2\51\1\0\1\5"+
    "\1\176\1\5\1\177\1\5\1\200\1\110\2\51\1\0"+
    "\1\5\1\201\1\202\1\0\2\51\1\203\1\5\1\0"+
    "\2\51\1\204\1\0\2\51\1\0\2\51\1\0\2\51"+
    "\1\0\2\51\1\0\1\51\1\47\1\0\5\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\330\0\u0168\0\u01b0"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\330\0\330\0\u0360"+
    "\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0"+
    "\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\330\0\330"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\u0798\0\u07e0"+
    "\0\u0828\0\u0870\0\330\0\330\0\330\0\u08b8\0\u0900\0\u0948"+
    "\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\330\0\330\0\u0ab0\0\u0af8"+
    "\0\u0b40\0\330\0\u0b88\0\u0bd0\0\u0c18\0\330\0\330\0\330"+
    "\0\330\0\u0c60\0\u0ca8\0\330\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8"+
    "\0\u0e10\0\u0e58\0\330\0\330\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78"+
    "\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8"+
    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\u01f8\0\u1560\0\u15a8\0\u15f0"+
    "\0\u1638\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830"+
    "\0\u1878\0\330\0\330\0\u18c0\0\330\0\u1908\0\330\0\330"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\330"+
    "\0\u1950\0\u1998\0\330\0\330\0\330\0\330\0\330\0\330"+
    "\0\330\0\330\0\330\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00"+
    "\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40"+
    "\0\330\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38"+
    "\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178"+
    "\0\u01f8\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370"+
    "\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u01f8\0\u2568"+
    "\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u01f8\0\u2760"+
    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\330"+
    "\0\u29a0\0\330\0\330\0\u1a28\0\330\0\u29e8\0\330\0\330"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\u2a30\0\330"+
    "\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u01f8\0\u2c28"+
    "\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u01f8\0\u2dd8\0\u01f8"+
    "\0\u2e20\0\u01f8\0\u2e68\0\u2eb0\0\u2ef8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u2f40\0\u2f88\0\u01f8\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0"+
    "\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330"+
    "\0\u01f8\0\u3378\0\330\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0"+
    "\0\u01f8\0\u3528\0\u3570\0\u35b8\0\u01f8\0\u01f8\0\u3600\0\u3648"+
    "\0\u3690\0\u36d8\0\u01f8\0\u3720\0\u01f8\0\u3768\0\u37b0\0\u37f8"+
    "\0\u3840\0\u3888\0\u38d0\0\u3918\0\u3960\0\u01f8\0\u01f8\0\u39a8"+
    "\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u01f8\0\u3b10\0\u3b58\0\u3ba0"+
    "\0\u3be8\0\u3c30\0\u3c78\0\u01f8\0\u3cc0\0\u01f8\0\u3d08\0\u01f8"+
    "\0\u01f8\0\u3d50\0\u3d98\0\u01f8\0\u3de0\0\u3e28\0\u01f8\0\u3e70"+
    "\0\u01f8\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u01f8\0\u4020"+
    "\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u01f8\0\u4188\0\u41d0\0\u4218"+
    "\0\u01f8\0\u4260\0\u42a8\0\u42f0\0\u01f8\0\u01f8\0\u01f8\0\u4338"+
    "\0\u01f8\0\u4380\0\u43c8\0\u4410\0\u4458\0\u01f8\0\u44a0\0\u44e8"+
    "\0\u01f8\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698\0\u46e0"+
    "\0\u4728\0\u4770\0\u01f8\0\u47b8\0\u01f8\0\u4800\0\u01f8\0\u4848"+
    "\0\u4890\0\u48d8\0\u4920\0\u4968\0\u01f8\0\u01f8\0\u49b0\0\u49f8"+
    "\0\u4a40\0\330\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u01f8\0\u4ba8"+
    "\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8"+
    "\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f50\0\u4f98\0\u4fe0"+
    "\0\u5028\0\u5070\0\u50b8\0\u5100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\3\11\3\12\1\11\1\14\1\11\1\15\1\16\1\17"+
    "\1\4\1\20\1\21\1\22\1\23\1\24\1\25\1\11"+
    "\1\26\1\27\1\30\3\11\1\31\1\11\1\32\1\11"+
    "\1\33\1\11\1\34\1\11\1\35\1\36\1\11\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\5\12\1\11\1\63\1\64\1\65"+
    "\20\63\1\66\1\63\1\67\62\63\1\70\1\71\1\72"+
    "\21\70\1\4\1\73\62\70\112\0\1\6\111\0\1\74"+
    "\1\75\60\0\1\76\107\0\1\77\27\0\12\11\1\0"+
    "\1\11\4\0\30\11\24\0\6\11\7\0\2\12\1\100"+
    "\2\0\3\12\1\101\1\102\1\103\13\0\1\100\1\103"+
    "\6\0\1\104\1\0\1\101\32\0\5\12\1\104\7\0"+
    "\1\105\1\106\1\100\1\107\1\0\1\110\1\111\1\112"+
    "\1\101\1\102\1\103\13\0\1\100\1\103\6\0\1\104"+
    "\1\107\1\101\32\0\1\110\2\112\1\105\1\112\1\104"+
    "\7\0\2\102\3\0\3\102\63\0\5\102\23\0\1\113"+
    "\43\0\1\114\13\0\1\115\13\0\12\11\1\0\1\11"+
    "\4\0\1\11\1\116\26\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\4\11\1\117\1\11\1\120\4\11"+
    "\1\121\14\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\3\11\1\122\7\11\1\123\1\124\1\11\1\125"+
    "\7\11\1\126\1\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\4\11\1\127\7\11\1\130\13\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\10\11\1\131"+
    "\17\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\1\132\5\11\1\133\1\134\4\11\1\135\13\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\6\11\1\136"+
    "\21\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\7\11\1\137\10\11\1\140\7\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\1\141\7\11\1\142\5\11"+
    "\1\143\11\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\11\11\1\144\7\11\1\145\1\146\5\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\6\11\1\147"+
    "\1\11\1\150\17\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\1\151\5\11\1\152\1\153\5\11\1\154"+
    "\12\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\1\155\3\11\1\156\11\11\1\157\11\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\6\11\1\160\21\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\14\11"+
    "\1\161\13\11\24\0\6\11\66\0\1\162\107\0\1\163"+
    "\1\164\106\0\1\165\1\0\1\166\105\0\1\167\107\0"+
    "\1\170\6\0\1\171\100\0\1\172\7\0\1\173\77\0"+
    "\1\174\10\0\1\175\76\0\1\176\107\0\1\177\21\0"+
    "\1\63\2\0\20\63\1\0\1\63\1\0\62\63\2\0"+
    "\1\65\105\0\2\200\1\0\5\200\1\201\3\200\2\201"+
    "\1\202\4\200\1\203\1\204\1\205\1\200\1\206\1\200"+
    "\1\207\1\210\4\200\1\211\7\200\1\212\32\200\1\201"+
    "\2\202\1\200\1\202\1\200\24\0\1\213\65\0\1\72"+
    "\105\0\2\200\1\0\5\200\1\214\3\200\2\214\1\215"+
    "\4\200\1\216\1\217\1\220\1\200\1\221\1\200\1\222"+
    "\1\223\4\200\1\224\7\200\1\225\32\200\1\214\2\215"+
    "\1\200\1\215\1\200\1\74\1\5\1\6\105\74\5\75"+
    "\1\226\102\75\7\0\2\102\3\0\3\102\1\101\1\0"+
    "\1\103\14\0\1\103\6\0\1\104\1\0\1\101\32\0"+
    "\5\102\1\104\7\0\2\227\3\0\3\227\3\0\1\230"+
    "\54\0\1\230\2\0\5\227\10\0\2\105\3\0\3\105"+
    "\1\101\1\102\1\103\14\0\1\103\6\0\1\104\1\0"+
    "\1\101\32\0\5\105\1\104\7\0\1\105\1\106\1\231"+
    "\2\0\1\110\1\111\1\112\1\101\1\102\1\103\13\0"+
    "\1\231\1\103\6\0\1\104\1\0\1\101\32\0\1\110"+
    "\2\112\1\105\1\112\1\104\7\0\1\232\1\233\2\0"+
    "\5\232\1\0\1\232\4\0\2\232\3\0\1\232\2\0"+
    "\1\232\6\0\1\232\1\0\1\232\32\0\6\232\7\0"+
    "\1\105\1\234\1\231\2\0\3\234\1\101\1\102\1\103"+
    "\13\0\1\231\1\103\6\0\1\104\1\0\1\101\32\0"+
    "\3\234\1\105\1\234\1\104\7\0\1\105\1\112\1\231"+
    "\2\0\3\112\1\101\1\102\1\103\13\0\1\231\1\103"+
    "\6\0\1\104\1\0\1\101\32\0\3\112\1\105\1\112"+
    "\1\104\7\0\1\105\1\235\1\231\2\0\3\235\1\101"+
    "\1\102\1\103\13\0\1\231\1\103\6\0\1\104\1\0"+
    "\1\101\32\0\3\235\1\105\1\235\1\104\15\0\1\236"+
    "\100\0\12\11\1\0\1\11\4\0\2\11\1\237\25\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\240\17\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\6\11\1\241\21\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\3\11\1\242\24\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\1\243\27\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\11\11\1\244"+
    "\16\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\6\11\1\245\21\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\23\11\1\246\4\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\15\11\1\247\12\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\1\250\12\11"+
    "\1\251\2\11\1\252\11\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\4\11\1\253\10\11\1\254\12\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\3\11"+
    "\1\255\24\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\2\11\1\256\1\257\24\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\11\11\1\260\16\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\1\261\27\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\1\262"+
    "\27\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\11\11\1\263\16\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\2\11\1\264\25\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\3\11\1\265\24\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\3\11\1\266"+
    "\24\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\26\11\1\267\1\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\7\11\1\270\20\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\2\11\1\271\1\272\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\23\11"+
    "\1\273\4\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\16\11\1\274\11\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\21\11\1\275\6\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\7\11\1\276\20\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\4\11"+
    "\1\277\23\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\6\11\1\300\21\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\11\11\1\301\16\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\5\11\1\302\22\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\6\11"+
    "\1\303\6\11\1\304\12\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\1\11\1\305\26\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\15\11\1\306\12\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\15\11"+
    "\1\307\12\11\24\0\6\11\66\0\1\310\1\311\106\0"+
    "\1\312\31\0\1\202\3\0\3\202\63\0\3\202\1\0"+
    "\1\202\11\0\1\313\3\0\3\313\63\0\3\313\1\0"+
    "\1\313\11\0\1\314\3\0\3\314\5\0\1\315\55\0"+
    "\3\314\1\0\1\314\11\0\1\316\3\0\3\316\5\0"+
    "\1\315\55\0\3\316\1\0\1\316\25\0\1\317\107\0"+
    "\1\320\107\0\1\321\107\0\1\322\107\0\1\323\107\0"+
    "\1\324\107\0\1\325\107\0\1\326\63\0\4\75\1\6"+
    "\1\226\102\75\7\0\2\227\3\0\3\227\1\101\25\0"+
    "\1\104\1\0\1\101\32\0\5\227\1\104\7\0\2\227"+
    "\3\0\3\227\63\0\5\227\10\0\2\327\1\330\1\0"+
    "\5\327\1\0\1\327\4\0\2\327\3\0\1\327\1\0"+
    "\1\330\1\327\6\0\1\327\1\0\1\327\32\0\6\327"+
    "\7\0\1\232\1\233\1\330\1\0\5\232\1\0\1\232"+
    "\4\0\2\232\3\0\1\232\1\0\1\330\1\232\6\0"+
    "\1\232\1\0\1\232\32\0\6\232\7\0\1\105\1\331"+
    "\1\231\2\0\3\331\1\101\1\102\1\103\13\0\1\231"+
    "\1\103\6\0\1\104\1\0\1\101\32\0\3\331\1\105"+
    "\1\331\1\104\7\0\1\105\1\332\1\231\2\0\3\332"+
    "\1\101\1\102\1\103\13\0\1\231\1\103\6\0\1\104"+
    "\1\0\1\101\32\0\3\332\1\105\1\332\1\104\103\0"+
    "\1\333\12\0\12\11\1\0\1\11\4\0\3\11\1\334"+
    "\24\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\1\335\27\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\7\11\1\336\20\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\10\11\1\337\17\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\3\11\1\340\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\5\11"+
    "\1\341\22\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\4\11\1\342\23\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\10\11\1\343\17\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\3\11\1\344\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\11\11"+
    "\1\345\16\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\10\11\1\346\17\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\6\11\1\347\21\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\2\11\1\350\25\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\16\11"+
    "\1\351\11\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\10\11\1\352\17\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\5\11\1\353\22\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\3\11\1\354\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\2\11"+
    "\1\355\25\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\4\11\1\356\23\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\24\11\1\357\3\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\10\11\1\360\17\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\361\17\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\15\11\1\362\12\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\7\11\1\363\20\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\3\11\1\364\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\365\17\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\6\11\1\366\1\367\20\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\1\11\1\370\26\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\1\371\27\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\2\11"+
    "\1\372\25\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\1\373\27\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\1\374\27\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\12\11\1\375\15\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\3\11\1\376\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\25\11"+
    "\1\377\2\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\7\11\1\u0100\20\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\17\11\1\u0101\10\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\7\11\1\u0102\20\11"+
    "\24\0\6\11\66\0\1\u0103\45\0\1\315\72\0\2\u0104"+
    "\1\330\1\0\5\u0104\1\0\1\u0104\4\0\2\u0104\3\0"+
    "\1\u0104\1\0\1\330\1\u0104\6\0\1\u0104\1\0\1\u0104"+
    "\32\0\6\u0104\7\0\1\105\1\u0105\1\231\2\0\3\u0105"+
    "\1\101\1\102\1\103\13\0\1\231\1\103\6\0\1\104"+
    "\1\0\1\101\32\0\3\u0105\1\105\1\u0105\1\104\7\0"+
    "\1\105\1\u0106\1\231\2\0\3\u0106\1\101\1\102\1\103"+
    "\13\0\1\231\1\103\6\0\1\104\1\0\1\101\32\0"+
    "\3\u0106\1\105\1\u0106\1\104\104\0\1\u0107\11\0\12\11"+
    "\1\0\1\11\4\0\4\11\1\u0108\23\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\12\11\1\u0109\15\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\u010a\17\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\15\11\1\u010b\12\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\14\11\1\u010c\13\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\3\11\1\u010d\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\4\11"+
    "\1\u010e\23\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\5\11\1\u010f\22\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\2\11\1\u0110\25\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\26\11\1\u0111\1\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\4\11"+
    "\1\u0112\23\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\14\11\1\u0113\13\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\15\11\1\u0114\12\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\2\11\1\u0115\25\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\11\11"+
    "\1\u0116\16\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\25\11\1\u0117\2\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\1\u0118\27\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\4\11\1\u0119\23\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\4\11\1\u011a"+
    "\23\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\10\11\1\u011b\17\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\7\11\1\u011c\20\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\16\11\1\u011d\11\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\10\11\1\u011e"+
    "\17\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\3\11\1\u011f\24\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\7\11\1\u0120\20\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\1\u0121\27\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\10\11\1\u0122\17\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\1\u0123"+
    "\27\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\15\11\1\u0124\12\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\10\11\1\u0125\17\11\24\0\6\11\7\0"+
    "\2\u0126\1\330\1\0\5\u0126\1\0\1\u0126\4\0\2\u0126"+
    "\3\0\1\u0126\1\0\1\330\1\u0126\6\0\1\u0126\1\0"+
    "\1\u0126\32\0\6\u0126\7\0\1\105\1\u0127\1\231\2\0"+
    "\3\u0127\1\101\1\102\1\103\13\0\1\231\1\103\6\0"+
    "\1\104\1\0\1\101\32\0\3\u0127\1\105\1\u0127\1\104"+
    "\7\0\1\105\1\u0128\1\231\2\0\3\u0128\1\101\1\102"+
    "\1\103\13\0\1\231\1\103\6\0\1\104\1\0\1\101"+
    "\32\0\3\u0128\1\105\1\u0128\1\104\103\0\1\u0129\12\0"+
    "\12\11\1\0\1\11\4\0\1\u012a\27\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\1\u012b\27\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\5\11\1\u012c"+
    "\22\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\4\11\1\u012d\23\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\14\11\1\u012e\13\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\15\11\1\u012f\12\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\2\11\1\u0130"+
    "\25\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\11\11\1\u0131\16\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\11\11\1\u0132\16\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\17\11\1\u0133\10\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\10\11\1\u0134"+
    "\17\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\11\11\1\u0135\16\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\21\11\1\u0136\6\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\3\11\1\u0137\24\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\22\11\1\u0138"+
    "\5\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\10\11\1\u0139\17\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\7\11\1\u013a\20\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\7\11\1\u013b\20\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\24\11\1\u013c"+
    "\3\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\5\11\1\u013d\22\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\3\11\1\u013e\24\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\5\11\1\u013f\22\11\24\0"+
    "\6\11\7\0\2\u0140\1\330\1\0\5\u0140\1\0\1\u0140"+
    "\4\0\2\u0140\3\0\1\u0140\1\0\1\330\1\u0140\6\0"+
    "\1\u0140\1\0\1\u0140\32\0\6\u0140\7\0\1\105\1\u0141"+
    "\1\231\2\0\3\u0141\1\101\1\102\1\103\13\0\1\231"+
    "\1\103\6\0\1\104\1\0\1\101\32\0\3\u0141\1\105"+
    "\1\u0141\1\104\7\0\1\105\1\u0142\1\231\2\0\3\u0142"+
    "\1\101\1\102\1\103\13\0\1\231\1\103\6\0\1\104"+
    "\1\0\1\101\32\0\3\u0142\1\105\1\u0142\1\104\105\0"+
    "\1\u0143\10\0\12\11\1\0\1\11\4\0\5\11\1\u0144"+
    "\22\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\11\11\1\u0145\16\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\6\11\1\u0146\21\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\10\11\1\u0147\17\11\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\16\11\1\u0148"+
    "\11\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\2\11\1\u0149\25\11\24\0\6\11\6\0\12\11\1\0"+
    "\1\11\4\0\5\11\1\u014a\22\11\24\0\6\11\6\0"+
    "\12\11\1\0\1\11\4\0\1\u014b\27\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\10\11\1\u014c\17\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\3\11"+
    "\1\u014d\24\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\13\11\1\u014e\14\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\10\11\1\u014f\17\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\3\11\1\u0150\24\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\u0151\17\11\24\0\6\11\7\0\2\u0152\1\330\1\0"+
    "\5\u0152\1\0\1\u0152\4\0\2\u0152\3\0\1\u0152\1\0"+
    "\1\330\1\u0152\6\0\1\u0152\1\0\1\u0152\32\0\6\u0152"+
    "\7\0\1\105\1\u0153\1\231\2\0\3\u0153\1\101\1\102"+
    "\1\103\13\0\1\231\1\103\6\0\1\104\1\0\1\101"+
    "\32\0\3\u0153\1\105\1\u0153\1\104\7\0\1\105\1\u0154"+
    "\1\231\2\0\3\u0154\1\101\1\102\1\103\13\0\1\231"+
    "\1\103\6\0\1\104\1\0\1\101\32\0\3\u0154\1\105"+
    "\1\u0154\1\104\14\0\1\u0155\101\0\12\11\1\0\1\11"+
    "\4\0\3\11\1\u0156\24\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\11\11\1\u0157\16\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\11\11\1\u0158\16\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\u0159\17\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\10\11\1\u015a\17\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\5\11\1\u015b\22\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\11\11\1\u015c\16\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\u015d\17\11\24\0\6\11\7\0\2\u015e\1\330\1\0"+
    "\5\u015e\1\0\1\u015e\4\0\2\u015e\3\0\1\u015e\1\0"+
    "\1\330\1\u015e\6\0\1\u015e\1\0\1\u015e\32\0\6\u015e"+
    "\7\0\1\105\1\u015f\1\231\2\0\3\u015f\1\101\1\102"+
    "\1\103\13\0\1\231\1\103\6\0\1\104\1\0\1\101"+
    "\32\0\3\u015f\1\105\1\u015f\1\104\7\0\1\105\1\u0160"+
    "\1\231\2\0\3\u0160\1\101\1\102\1\103\13\0\1\231"+
    "\1\103\6\0\1\104\1\0\1\101\32\0\3\u0160\1\105"+
    "\1\u0160\1\104\106\0\1\u0161\7\0\12\11\1\0\1\11"+
    "\4\0\15\11\1\u0162\12\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\3\11\1\u0163\24\11\24\0\6\11"+
    "\6\0\12\11\1\0\1\11\4\0\6\11\1\u0164\21\11"+
    "\24\0\6\11\6\0\12\11\1\0\1\11\4\0\10\11"+
    "\1\u0165\17\11\24\0\6\11\6\0\12\11\1\0\1\11"+
    "\4\0\3\11\1\u0166\24\11\24\0\6\11\6\0\12\11"+
    "\1\0\1\11\4\0\17\11\1\u0167\10\11\24\0\6\11"+
    "\7\0\2\u0168\1\330\1\0\5\u0168\1\0\1\u0168\4\0"+
    "\2\u0168\3\0\1\u0168\1\0\1\330\1\u0168\6\0\1\u0168"+
    "\1\0\1\u0168\32\0\6\u0168\7\0\1\105\1\u0169\1\231"+
    "\2\0\3\u0169\1\101\1\102\1\103\13\0\1\231\1\103"+
    "\6\0\1\104\1\0\1\101\32\0\3\u0169\1\105\1\u0169"+
    "\1\104\7\0\1\105\1\u016a\1\231\2\0\3\u016a\1\101"+
    "\1\102\1\103\13\0\1\231\1\103\6\0\1\104\1\0"+
    "\1\101\32\0\3\u016a\1\105\1\u016a\1\104\103\0\1\u016b"+
    "\12\0\12\11\1\0\1\11\4\0\27\11\1\u016c\24\0"+
    "\6\11\6\0\12\11\1\0\1\11\4\0\21\11\1\u016d"+
    "\6\11\24\0\6\11\6\0\12\11\1\0\1\11\4\0"+
    "\2\11\1\u016e\25\11\24\0\6\11\7\0\2\u016f\1\330"+
    "\1\0\5\u016f\1\0\1\u016f\4\0\2\u016f\3\0\1\u016f"+
    "\1\0\1\330\1\u016f\6\0\1\u016f\1\0\1\u016f\32\0"+
    "\6\u016f\7\0\1\105\1\u0170\1\231\2\0\3\u0170\1\101"+
    "\1\102\1\103\13\0\1\231\1\103\6\0\1\104\1\0"+
    "\1\101\32\0\3\u0170\1\105\1\u0170\1\104\7\0\1\105"+
    "\1\u0171\1\231\2\0\3\u0171\1\101\1\102\1\103\13\0"+
    "\1\231\1\103\6\0\1\104\1\0\1\101\32\0\3\u0171"+
    "\1\105\1\u0171\1\104\105\0\1\u0172\10\0\12\11\1\0"+
    "\1\11\4\0\10\11\1\u0173\17\11\24\0\6\11\7\0"+
    "\2\u0174\1\330\1\0\5\u0174\1\0\1\u0174\4\0\2\u0174"+
    "\3\0\1\u0174\1\0\1\330\1\u0174\6\0\1\u0174\1\0"+
    "\1\u0174\32\0\6\u0174\7\0\1\105\1\u0175\1\231\2\0"+
    "\3\u0175\1\101\1\102\1\103\13\0\1\231\1\103\6\0"+
    "\1\104\1\0\1\101\32\0\3\u0175\1\105\1\u0175\1\104"+
    "\7\0\1\105\1\u0176\1\231\2\0\3\u0176\1\101\1\102"+
    "\1\103\13\0\1\231\1\103\6\0\1\104\1\0\1\101"+
    "\32\0\3\u0176\1\105\1\u0176\1\104\6\0\12\11\1\0"+
    "\1\11\4\0\17\11\1\u0177\10\11\24\0\6\11\7\0"+
    "\2\u0178\1\330\1\0\5\u0178\1\0\1\u0178\4\0\2\u0178"+
    "\3\0\1\u0178\1\0\1\330\1\u0178\6\0\1\u0178\1\0"+
    "\1\u0178\32\0\6\u0178\7\0\1\105\1\u0179\1\231\2\0"+
    "\3\u0179\1\101\1\102\1\103\13\0\1\231\1\103\6\0"+
    "\1\104\1\0\1\101\32\0\3\u0179\1\105\1\u0179\1\104"+
    "\7\0\1\105\1\u017a\1\231\2\0\3\u017a\1\101\1\102"+
    "\1\103\13\0\1\231\1\103\6\0\1\104\1\0\1\101"+
    "\32\0\3\u017a\1\105\1\u017a\1\104\7\0\2\u017b\1\330"+
    "\1\0\5\u017b\1\0\1\u017b\4\0\2\u017b\3\0\1\u017b"+
    "\1\0\1\330\1\u017b\6\0\1\u017b\1\0\1\u017b\32\0"+
    "\6\u017b\7\0\1\105\1\u017c\1\231\2\0\3\u017c\1\101"+
    "\1\102\1\103\13\0\1\231\1\103\6\0\1\104\1\0"+
    "\1\101\32\0\3\u017c\1\105\1\u017c\1\104\7\0\1\105"+
    "\1\u017d\1\231\2\0\3\u017d\1\101\1\102\1\103\13\0"+
    "\1\231\1\103\6\0\1\104\1\0\1\101\32\0\3\u017d"+
    "\1\105\1\u017d\1\104\7\0\2\u017e\1\330\1\0\5\u017e"+
    "\1\0\1\u017e\4\0\2\u017e\3\0\1\u017e\1\0\1\330"+
    "\1\u017e\6\0\1\u017e\1\0\1\u017e\32\0\6\u017e\7\0"+
    "\1\105\1\u017f\1\231\2\0\3\u017f\1\101\1\102\1\103"+
    "\13\0\1\231\1\103\6\0\1\104\1\0\1\101\32\0"+
    "\3\u017f\1\105\1\u017f\1\104\7\0\1\105\1\u0180\1\231"+
    "\2\0\3\u0180\1\101\1\102\1\103\13\0\1\231\1\103"+
    "\6\0\1\104\1\0\1\101\32\0\3\u0180\1\105\1\u0180"+
    "\1\104\7\0\2\u0181\1\330\1\0\5\u0181\1\0\1\u0181"+
    "\4\0\2\u0181\3\0\1\u0181\1\0\1\330\1\u0181\6\0"+
    "\1\u0181\1\0\1\u0181\32\0\6\u0181\7\0\1\105\1\u0182"+
    "\1\231\2\0\3\u0182\1\101\1\102\1\103\13\0\1\231"+
    "\1\103\6\0\1\104\1\0\1\101\32\0\3\u0182\1\105"+
    "\1\u0182\1\104\7\0\1\105\1\u0183\1\231\2\0\3\u0183"+
    "\1\101\1\102\1\103\13\0\1\231\1\103\6\0\1\104"+
    "\1\0\1\101\32\0\3\u0183\1\105\1\u0183\1\104\7\0"+
    "\2\u0184\1\330\1\0\5\u0184\1\0\1\u0184\4\0\2\u0184"+
    "\3\0\1\u0184\1\0\1\330\1\u0184\6\0\1\u0184\1\0"+
    "\1\u0184\32\0\6\u0184\7\0\1\105\1\u0185\1\231\2\0"+
    "\3\u0185\1\101\1\102\1\103\13\0\1\231\1\103\6\0"+
    "\1\104\1\0\1\101\32\0\3\u0185\1\105\1\u0185\1\104"+
    "\7\0\1\105\1\u0186\1\231\2\0\3\u0186\1\101\1\102"+
    "\1\103\13\0\1\231\1\103\6\0\1\104\1\0\1\101"+
    "\32\0\3\u0186\1\105\1\u0186\1\104\7\0\2\u0187\1\330"+
    "\1\0\5\u0187\1\0\1\u0187\4\0\2\u0187\3\0\1\u0187"+
    "\1\0\1\330\1\u0187\6\0\1\u0187\1\0\1\u0187\32\0"+
    "\6\u0187\7\0\1\105\1\u0188\1\231\2\0\3\u0188\1\101"+
    "\1\102\1\103\13\0\1\231\1\103\6\0\1\104\1\0"+
    "\1\101\32\0\3\u0188\1\105\1\u0188\1\104\11\0\1\330"+
    "\23\0\1\330\61\0\1\105\1\u0189\1\231\2\0\3\u0189"+
    "\1\101\1\102\1\103\13\0\1\231\1\103\6\0\1\104"+
    "\1\0\1\101\32\0\3\u0189\1\105\1\u0189\1\104\7\0"+
    "\1\105\1\u018a\1\231\2\0\3\u018a\1\101\1\102\1\103"+
    "\13\0\1\231\1\103\6\0\1\104\1\0\1\101\32\0"+
    "\3\u018a\1\105\1\u018a\1\104\7\0\1\105\1\u018b\1\231"+
    "\2\0\3\u018b\1\101\1\102\1\103\13\0\1\231\1\103"+
    "\6\0\1\104\1\0\1\101\32\0\3\u018b\1\105\1\u018b"+
    "\1\104\7\0\1\105\1\u018c\1\231\2\0\3\u018c\1\101"+
    "\1\102\1\103\13\0\1\231\1\103\6\0\1\104\1\0"+
    "\1\101\32\0\3\u018c\1\105\1\u018c\1\104\7\0\2\105"+
    "\1\231\2\0\3\105\1\101\1\102\1\103\13\0\1\231"+
    "\1\103\6\0\1\104\1\0\1\101\32\0\5\105\1\104";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20808];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\17\1\10\11"+
    "\4\1\3\11\7\1\2\11\3\1\1\11\2\1\1\0"+
    "\4\11\1\1\1\0\1\11\2\1\1\0\3\1\2\11"+
    "\1\0\44\1\2\11\1\1\1\11\1\1\12\11\2\1"+
    "\11\11\12\1\1\0\1\1\1\0\1\11\4\1\1\0"+
    "\51\1\1\11\1\1\2\11\1\0\1\11\1\0\10\11"+
    "\1\1\1\11\2\1\1\0\47\1\1\11\3\1\1\0"+
    "\41\1\1\0\31\1\1\0\21\1\1\0\13\1\1\0"+
    "\11\1\1\0\3\1\1\0\2\1\1\11\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1, yytext());
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return symbol(GTEQ);
          }
        case 133: break;
        case 29: 
          { return symbol(XOR);
          }
        case 134: break;
        case 20: 
          { return symbol(GT);
          }
        case 135: break;
        case 126: 
          { return symbol(TRANSIENT);
          }
        case 136: break;
        case 51: 
          { return symbol(NOTEQ);
          }
        case 137: break;
        case 84: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
          }
        case 138: break;
        case 90: 
          { return symbol(BYTE);
          }
        case 139: break;
        case 9: 
          { yybegin(STRING); string.setLength(0);
          }
        case 140: break;
        case 13: 
          { return symbol(LBRACE);
          }
        case 141: break;
        case 19: 
          { return symbol(EQ);
          }
        case 142: break;
        case 42: 
          { return symbol(MINUSMINUS);
          }
        case 143: break;
        case 125: 
          { return symbol(CONTINUE);
          }
        case 144: break;
        case 40: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 145: break;
        case 110: 
          { return symbol(STATIC);
          }
        case 146: break;
        case 45: 
          { return symbol(DO);
          }
        case 147: break;
        case 57: 
          { return symbol(PLUSPLUS);
          }
        case 148: break;
        case 88: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
          }
        case 149: break;
        case 21: 
          { return symbol(LT);
          }
        case 150: break;
        case 119: 
          { return symbol(EXTENDS);
          }
        case 151: break;
        case 112: 
          { return symbol(THROWS);
          }
        case 152: break;
        case 52: 
          { return symbol(ANDEQ);
          }
        case 153: break;
        case 61: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
          }
        case 154: break;
        case 66: 
          { string.append( '\t' );
          }
        case 155: break;
        case 117: 
          { return symbol(PUBLIC);
          }
        case 156: break;
        case 59: 
          { return symbol(MODEQ);
          }
        case 157: break;
        case 124: 
          { return symbol(ABSTRACT);
          }
        case 158: break;
        case 118: 
          { return symbol(BOOLEAN);
          }
        case 159: break;
        case 101: 
          { return symbol(SHORT);
          }
        case 160: break;
        case 103: 
          { return symbol(THROW);
          }
        case 161: break;
        case 10: 
          { yybegin(CHARLITERAL);
          }
        case 162: break;
        case 46: 
          { return symbol(EQEQ);
          }
        case 163: break;
        case 130: 
          { return symbol(IMPLEMENTS);
          }
        case 164: break;
        case 38: 
          { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 165: break;
        case 95: 
          { return symbol(LONG);
          }
        case 166: break;
        case 27: 
          { return symbol(OR);
          }
        case 167: break;
        case 28: 
          { return symbol(PLUS);
          }
        case 168: break;
        case 132: 
          { return symbol(SYNCHRONIZED);
          }
        case 169: break;
        case 68: 
          { string.append( '\n' );
          }
        case 170: break;
        case 12: 
          { return symbol(RPAREN);
          }
        case 171: break;
        case 48: 
          { return symbol(RSHIFT);
          }
        case 172: break;
        case 105: 
          { return symbol(CLASS);
          }
        case 173: break;
        case 92: 
          { return symbol(THIS);
          }
        case 174: break;
        case 87: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
          }
        case 175: break;
        case 70: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
          }
        case 176: break;
        case 36: 
          { return symbol(MULTEQ);
          }
        case 177: break;
        case 81: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
          }
        case 178: break;
        case 123: 
          { return symbol(PRIVATE);
          }
        case 179: break;
        case 78: 
          { return symbol(URSHIFT);
          }
        case 180: break;
        case 121: 
          { return symbol(FINALLY);
          }
        case 181: break;
        case 99: 
          { return symbol(URSHIFTEQ);
          }
        case 182: break;
        case 72: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
          }
        case 183: break;
        case 76: 
          { return symbol(FOR);
          }
        case 184: break;
        case 89: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
          }
        case 185: break;
        case 39: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 186: break;
        case 86: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
          }
        case 187: break;
        case 74: 
          { return symbol(NEW);
          }
        case 188: break;
        case 35: 
          { return symbol(DIVEQ);
          }
        case 189: break;
        case 114: 
          { return symbol(NATIVE);
          }
        case 190: break;
        case 82: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
          }
        case 191: break;
        case 120: 
          { return symbol(DEFAULT);
          }
        case 192: break;
        case 24: 
          { return symbol(QUESTION);
          }
        case 193: break;
        case 3: 
          { return symbol(DIV);
          }
        case 194: break;
        case 116: 
          { return symbol(DOUBLE);
          }
        case 195: break;
        case 94: 
          { return symbol(CHAR);
          }
        case 196: break;
        case 44: 
          { return symbol(IF);
          }
        case 197: break;
        case 85: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
          }
        case 198: break;
        case 5: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 199: break;
        case 60: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 200: break;
        case 122: 
          { return symbol(PACKAGE);
          }
        case 201: break;
        case 58: 
          { return symbol(XOREQ);
          }
        case 202: break;
        case 111: 
          { return symbol(SWITCH);
          }
        case 203: break;
        case 79: 
          { return symbol(LSHIFTEQ);
          }
        case 204: break;
        case 30: 
          { return symbol(MOD);
          }
        case 205: break;
        case 11: 
          { return symbol(LPAREN);
          }
        case 206: break;
        case 67: 
          { string.append( '\r' );
          }
        case 207: break;
        case 91: 
          { return symbol(BOOLEAN_LITERAL, true);
          }
        case 208: break;
        case 50: 
          { return symbol(LSHIFT);
          }
        case 209: break;
        case 100: 
          { return symbol(BREAK);
          }
        case 210: break;
        case 97: 
          { return symbol(NULL_LITERAL);
          }
        case 211: break;
        case 23: 
          { return symbol(COMP);
          }
        case 212: break;
        case 33: 
          { yybegin(YYINITIAL); return symbol(Sym.STRING_LITERAL, string.toString());
          }
        case 213: break;
        case 65: 
          { string.append( '\b' );
          }
        case 214: break;
        case 43: 
          { return symbol(MINUSEQ);
          }
        case 215: break;
        case 37: 
          { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 216: break;
        case 32: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 217: break;
        case 73: 
          { return symbol(TRY);
          }
        case 218: break;
        case 62: 
          { string.append( '\"' );
          }
        case 219: break;
        case 54: 
          { return symbol(OREQ);
          }
        case 220: break;
        case 129: 
          { return symbol(INSTANCEOF);
          }
        case 221: break;
        case 41: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
          }
        case 222: break;
        case 16: 
          { return symbol(RBRACK);
          }
        case 223: break;
        case 17: 
          { return symbol(SEMICOLON);
          }
        case 224: break;
        case 6: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 225: break;
        case 108: 
          { return symbol(FINAL);
          }
        case 226: break;
        case 115: 
          { return symbol(IMPORT);
          }
        case 227: break;
        case 1: 
          { throw new Error(" Nao permitido <"+yytext()+">; line: " + yyline + " column: " + yycolumn);
          }
        case 228: break;
        case 63: 
          { string.append( '\'' );
          }
        case 229: break;
        case 107: 
          { return symbol(FLOAT);
          }
        case 230: break;
        case 102: 
          { return symbol(SUPER);
          }
        case 231: break;
        case 64: 
          { string.append( '\\' );
          }
        case 232: break;
        case 93: 
          { return symbol(CASE);
          }
        case 233: break;
        case 8: 
          { return symbol(MINUS);
          }
        case 234: break;
        case 7: 
          { return symbol(DOT);
          }
        case 235: break;
        case 77: 
          { return symbol(RSHIFTEQ);
          }
        case 236: break;
        case 75: 
          { return symbol(INT);
          }
        case 237: break;
        case 128: 
          { return symbol(PROTECTED);
          }
        case 238: break;
        case 26: 
          { return symbol(AND);
          }
        case 239: break;
        case 131: 
          { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 240: break;
        case 25: 
          { return symbol(COLON);
          }
        case 241: break;
        case 49: 
          { return symbol(LTEQ);
          }
        case 242: break;
        case 69: 
          { string.append( '\f' );
          }
        case 243: break;
        case 98: 
          { return symbol(VOID);
          }
        case 244: break;
        case 22: 
          { return symbol(NOT);
          }
        case 245: break;
        case 14: 
          { return symbol(RBRACE);
          }
        case 246: break;
        case 71: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
          }
        case 247: break;
        case 4: 
          { return symbol(MULT);
          }
        case 248: break;
        case 2: 
          { /* ignore */
          }
        case 249: break;
        case 80: 
          { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, (char)val);
          }
        case 250: break;
        case 15: 
          { return symbol(LBRACK);
          }
        case 251: break;
        case 55: 
          { return symbol(OROR);
          }
        case 252: break;
        case 83: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
          }
        case 253: break;
        case 31: 
          { string.append( yytext() );
          }
        case 254: break;
        case 127: 
          { return symbol(INTERFACE);
          }
        case 255: break;
        case 53: 
          { return symbol(ANDAND);
          }
        case 256: break;
        case 109: 
          { return symbol(WHILE);
          }
        case 257: break;
        case 34: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 258: break;
        case 56: 
          { return symbol(PLUSEQ);
          }
        case 259: break;
        case 96: 
          { return symbol(ELSE);
          }
        case 260: break;
        case 104: 
          { return symbol(CATCH);
          }
        case 261: break;
        case 18: 
          { return symbol(COMMA);
          }
        case 262: break;
        case 106: 
          { return symbol(BOOLEAN_LITERAL, false);
          }
        case 263: break;
        case 113: 
          { return symbol(RETURN);
          }
        case 264: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
